[
  
       
    {
        "method": "POST",
        "url": "http://undefinedundefined/collections/api/v1/pay/cardinalCallBack",
        "description": "null",
        "resource": "cardinalCallBack",
        "snippets": [
            {
                "id": "csharp_restsharp",
                "title": "Csharp + Restsharp",
                "content": "var client = new RestClient("http://undefinedundefined/collections/api/v1/pay/cardinalCallBack");  
var request = new RestRequest(Method.POST);  
request.AddHeader("user-agent", "SOME_STRING_VALUE");  
request.AddHeader("content-type", "SOME_STRING_VALUE");  
request.AddHeader("content-length", "SOME_STRING_VALUE");  
request.AddHeader("accept-language", "SOME_STRING_VALUE");  
request.AddHeader("accept-encoding", "SOME_STRING_VALUE");  
request.AddHeader("accept", "application/x-www-form-urlencoded");  
IRestResponse response = client.Execute(request);"
            },
            {
                "id": "php_curl",
                "title": "Php + Curl",
                "content": "<?php  
  
$curl = curl_init();  
  
curl_setopt_array($curl, array(  
  CURLOPT_URL => "http://undefinedundefined/collections/api/v1/pay/cardinalCallBack",  
  CURLOPT_RETURNTRANSFER => true,  
  CURLOPT_ENCODING => "",  
  CURLOPT_MAXREDIRS => 10,  
  CURLOPT_TIMEOUT => 30,  
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,  
  CURLOPT_CUSTOMREQUEST => "POST",  
  CURLOPT_HTTPHEADER => array(  
    "accept: application/x-www-form-urlencoded",  
    "accept-encoding: SOME_STRING_VALUE",  
    "accept-language: SOME_STRING_VALUE",  
    "content-length: SOME_STRING_VALUE",  
    "content-type: SOME_STRING_VALUE",  
    "user-agent: SOME_STRING_VALUE"  
  ),  
));  
  
$response = curl_exec($curl);  
$err = curl_error($curl);  
  
curl_close($curl);  
  
if ($err) {  
  echo "cURL Error #:" . $err;  
} else {  
  echo $response;  
}"
            },
            {
                "id": "swift_nsurlsession",
                "title": "Swift + Nsurlsession",
                "content": "import Foundation  
  
let headers = [  
  "accept": "application/x-www-form-urlencoded",  
  "accept-encoding": "SOME_STRING_VALUE",  
  "accept-language": "SOME_STRING_VALUE",  
  "content-length": "SOME_STRING_VALUE",  
  "content-type": "SOME_STRING_VALUE",  
  "user-agent": "SOME_STRING_VALUE"  
]  
  
var request = NSMutableURLRequest(URL: NSURL(string: "http://undefinedundefined/collections/api/v1/pay/cardinalCallBack")!,  
                                        cachePolicy: .UseProtocolCachePolicy,  
                                    timeoutInterval: 10.0)  
request.HTTPMethod = "POST"  
request.allHTTPHeaderFields = headers  
  
let session = NSURLSession.sharedSession()  
let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in  
  if (error != nil) {  
    println(error)  
  } else {  
    let httpResponse = response as? NSHTTPURLResponse  
    println(httpResponse)  
  }  
})  
  
dataTask.resume()"
            },
            {
                "id": "objc_nsurlsession",
                "title": "Objc + Nsurlsession",
                "content": "#import <Foundation/Foundation.h>  
  
NSDictionary *headers = @{ @"accept": @"application/x-www-form-urlencoded",  
                           @"accept-encoding": @"SOME_STRING_VALUE",  
                           @"accept-language": @"SOME_STRING_VALUE",  
                           @"content-length": @"SOME_STRING_VALUE",  
                           @"content-type": @"SOME_STRING_VALUE",  
                           @"user-agent": @"SOME_STRING_VALUE" };  
  
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://undefinedundefined/collections/api/v1/pay/cardinalCallBack"]  
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy  
                                                   timeoutInterval:10.0];  
[request setHTTPMethod:@"POST"];  
[request setAllHTTPHeaderFields:headers];  
  
NSURLSession *session = [NSURLSession sharedSession];  
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request  
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {  
                                                if (error) {  
                                                    NSLog(@"%@", error);  
                                                } else {  
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;  
                                                    NSLog(@"%@", httpResponse);  
                                                }  
                                            }];  
[dataTask resume];"
            }
        ]
    },
    {
        "method": "POST",
        "url": "http://undefinedundefined/api/v3/purchases/otps/enrollments",
        "description": "No description available",
        "resource": "enrollments",
        "snippets": [
            {
                "id": "csharp_restsharp",
                "title": "Csharp + Restsharp",
                "content": "var client = new RestClient("http://undefinedundefined/api/v3/purchases/otps/enrollments");  
var request = new RestRequest(Method.POST);  
request.AddHeader("authkeyversion", "SOME_STRING_VALUE");  
request.AddHeader("signaturemethod", "SOME_STRING_VALUE");  
request.AddHeader("signature", "SOME_STRING_VALUE");  
request.AddHeader("nonce", "SOME_STRING_VALUE");  
request.AddHeader("timestamp", "SOME_STRING_VALUE");  
request.AddHeader("authorization", "SOME_STRING_VALUE");  
request.AddHeader("content-type", "SOME_STRING_VALUE");  
request.AddHeader("accept", "text/plain");  
request.AddParameter("SOME_STRING_VALUE", "{\\"paymentId\\":\\"<ADD STRING VALUE>\\",\\"mobilePhoneNumber\\":\\"<ADD STRING VALUE>\\",\\"transactionRef\\":\\"<ADD STRING VALUE>\\"}", ParameterType.RequestBody);  
IRestResponse response = client.Execute(request);"
            },
            {
                "id": "php_curl",
                "title": "Php + Curl",
                "content": "<?php  
  
$curl = curl_init();  
  
curl_setopt_array($curl, array(  
  CURLOPT_URL => "http://undefinedundefined/api/v3/purchases/otps/enrollments",  
  CURLOPT_RETURNTRANSFER => true,  
  CURLOPT_ENCODING => "",  
  CURLOPT_MAXREDIRS => 10,  
  CURLOPT_TIMEOUT => 30,  
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,  
  CURLOPT_CUSTOMREQUEST => "POST",  
  CURLOPT_POSTFIELDS => "{\\"paymentId\\":\\"<ADD STRING VALUE>\\",\\"mobilePhoneNumber\\":\\"<ADD STRING VALUE>\\",\\"transactionRef\\":\\"<ADD STRING VALUE>\\"}",  
  CURLOPT_HTTPHEADER => array(  
    "accept: text/plain",  
    "authkeyversion: SOME_STRING_VALUE",  
    "authorization: SOME_STRING_VALUE",  
    "content-type: SOME_STRING_VALUE",  
    "nonce: SOME_STRING_VALUE",  
    "signature: SOME_STRING_VALUE",  
    "signaturemethod: SOME_STRING_VALUE",  
    "timestamp: SOME_STRING_VALUE"  
  ),  
));  
  
$response = curl_exec($curl);  
$err = curl_error($curl);  
  
curl_close($curl);  
  
if ($err) {  
  echo "cURL Error #:" . $err;  
} else {  
  echo $response;  
}"
            },
            {
                "id": "swift_nsurlsession",
                "title": "Swift + Nsurlsession",
                "content": "import Foundation  
  
let headers = [  
  "accept": "text/plain",  
  "content-type": "SOME_STRING_VALUE",  
  "authorization": "SOME_STRING_VALUE",  
  "timestamp": "SOME_STRING_VALUE",  
  "nonce": "SOME_STRING_VALUE",  
  "signature": "SOME_STRING_VALUE",  
  "signaturemethod": "SOME_STRING_VALUE",  
  "authkeyversion": "SOME_STRING_VALUE"  
]  
let parameters = [  
  "paymentId": "<ADD STRING VALUE>",  
  "mobilePhoneNumber": "<ADD STRING VALUE>",  
  "transactionRef": "<ADD STRING VALUE>"  
]  
  
let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)  
  
var request = NSMutableURLRequest(URL: NSURL(string: "http://undefinedundefined/api/v3/purchases/otps/enrollments")!,  
                                        cachePolicy: .UseProtocolCachePolicy,  
                                    timeoutInterval: 10.0)  
request.HTTPMethod = "POST"  
request.allHTTPHeaderFields = headers  
request.HTTPBody = postData  
  
let session = NSURLSession.sharedSession()  
let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in  
  if (error != nil) {  
    println(error)  
  } else {  
    let httpResponse = response as? NSHTTPURLResponse  
    println(httpResponse)  
  }  
})  
  
dataTask.resume()"
            },
            {
                "id": "objc_nsurlsession",
                "title": "Objc + Nsurlsession",
                "content": "#import <Foundation/Foundation.h>  
  
NSDictionary *headers = @{ @"accept": @"text/plain",  
                           @"content-type": @"SOME_STRING_VALUE",  
                           @"authorization": @"SOME_STRING_VALUE",  
                           @"timestamp": @"SOME_STRING_VALUE",  
                           @"nonce": @"SOME_STRING_VALUE",  
                           @"signature": @"SOME_STRING_VALUE",  
                           @"signaturemethod": @"SOME_STRING_VALUE",  
                           @"authkeyversion": @"SOME_STRING_VALUE" };  
NSDictionary *parameters = @{ @"paymentId": @"<ADD STRING VALUE>",  
                              @"mobilePhoneNumber": @"<ADD STRING VALUE>",  
                              @"transactionRef": @"<ADD STRING VALUE>" };  
  
NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];  
  
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://undefinedundefined/api/v3/purchases/otps/enrollments"]  
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy  
                                                   timeoutInterval:10.0];  
[request setHTTPMethod:@"POST"];  
[request setAllHTTPHeaderFields:headers];  
[request setHTTPBody:postData];  
  
NSURLSession *session = [NSURLSession sharedSession];  
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request  
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {  
                                                if (error) {  
                                                    NSLog(@"%@", error);  
                                                } else {  
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;  
                                                    NSLog(@"%@", httpResponse);  
                                                }  
                                            }];  
[dataTask resume];"
            }
        ]
    },
    {
        "method": "GET",
        "url": "http://undefinedundefined/collections/api/v1/gettransaction.json",
        "description": "Returns Bank Code and Account Number",
        "resource": "gettransaction.json",
        "snippets": [
            {
                "id": "csharp_restsharp",
                "title": "Csharp + Restsharp",
                "content": "var client = new RestClient("http://undefinedundefined/collections/api/v1/gettransaction.json?getacquirerdata=true&transactionreference=%3C%3CtransactionRef%3E%3E&amount=66666&merchantcode=MX187");  
var request = new RestRequest(Method.GET);  
request.AddHeader("accept", "text/plain");  
IRestResponse response = client.Execute(request);"
            },
            {
                "id": "php_curl",
                "title": "Php + Curl",
                "content": "<?php  
  
$curl = curl_init();  
  
curl_setopt_array($curl, array(  
  CURLOPT_URL => "http://undefinedundefined/collections/api/v1/gettransaction.json?getacquirerdata=true&transactionreference=%3C%3CtransactionRef%3E%3E&amount=66666&merchantcode=MX187",  
  CURLOPT_RETURNTRANSFER => true,  
  CURLOPT_ENCODING => "",  
  CURLOPT_MAXREDIRS => 10,  
  CURLOPT_TIMEOUT => 30,  
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,  
  CURLOPT_CUSTOMREQUEST => "GET",  
  CURLOPT_HTTPHEADER => array(  
    "accept: text/plain"  
  ),  
));  
  
$response = curl_exec($curl);  
$err = curl_error($curl);  
  
curl_close($curl);  
  
if ($err) {  
  echo "cURL Error #:" . $err;  
} else {  
  echo $response;  
}"
            },
            {
                "id": "swift_nsurlsession",
                "title": "Swift + Nsurlsession",
                "content": "import Foundation  
  
let headers = ["accept": "text/plain"]  
  
var request = NSMutableURLRequest(URL: NSURL(string: "http://undefinedundefined/collections/api/v1/gettransaction.json?getacquirerdata=true&transactionreference=%3C%3CtransactionRef%3E%3E&amount=66666&merchantcode=MX187")!,  
                                        cachePolicy: .UseProtocolCachePolicy,  
                                    timeoutInterval: 10.0)  
request.HTTPMethod = "GET"  
request.allHTTPHeaderFields = headers  
  
let session = NSURLSession.sharedSession()  
let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in  
  if (error != nil) {  
    println(error)  
  } else {  
    let httpResponse = response as? NSHTTPURLResponse  
    println(httpResponse)  
  }  
})  
  
dataTask.resume()"
            },
            {
                "id": "objc_nsurlsession",
                "title": "Objc + Nsurlsession",
                "content": "#import <Foundation/Foundation.h>  
  
NSDictionary *headers = @{ @"accept": @"text/plain" };  
  
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://undefinedundefined/collections/api/v1/gettransaction.json?getacquirerdata=true&transactionreference=%3C%3CtransactionRef%3E%3E&amount=66666&merchantcode=MX187"]  
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy  
                                                   timeoutInterval:10.0];  
[request setHTTPMethod:@"GET"];  
[request setAllHTTPHeaderFields:headers];  
  
NSURLSession *session = [NSURLSession sharedSession];  
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request  
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {  
                                                if (error) {  
                                                    NSLog(@"%@", error);  
                                                } else {  
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;  
                                                    NSLog(@"%@", httpResponse);  
                                                }  
                                            }];  
[dataTask resume];"
            }
        ]
    },
    {
        "method": "GET",
        "url": "http://undefinedundefined/api/v3/purchases",
        "description": "null",
        "resource": "purchases",
        "snippets": [
            {
                "id": "csharp_restsharp",
                "title": "Csharp + Restsharp",
                "content": "var client = new RestClient("http://undefinedundefined/api/v3/purchases");  
var request = new RestRequest(Method.GET);  
request.AddHeader("authkeyversion", "SOME_STRING_VALUE");  
request.AddHeader("signaturemethod", "SOME_STRING_VALUE");  
request.AddHeader("signature", "SOME_STRING_VALUE");  
request.AddHeader("nonce", "SOME_STRING_VALUE");  
request.AddHeader("timestamp", "SOME_STRING_VALUE");  
request.AddHeader("authorization", "SOME_STRING_VALUE");  
request.AddHeader("content-type", "SOME_STRING_VALUE");  
request.AddHeader("-----------------------------------------------------------------------------------------------", "SOME_STRING_VALUE");  
request.AddHeader("transactionref", "SOME_STRING_VALUE");  
request.AddHeader("amount", "SOME_STRING_VALUE");  
request.AddHeader("accept", "text/plain");  
IRestResponse response = client.Execute(request);"
            },
            {
                "id": "php_curl",
                "title": "Php + Curl",
                "content": "<?php  
  
$curl = curl_init();  
  
curl_setopt_array($curl, array(  
  CURLOPT_URL => "http://undefinedundefined/api/v3/purchases",  
  CURLOPT_RETURNTRANSFER => true,  
  CURLOPT_ENCODING => "",  
  CURLOPT_MAXREDIRS => 10,  
  CURLOPT_TIMEOUT => 30,  
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,  
  CURLOPT_CUSTOMREQUEST => "GET",  
  CURLOPT_HTTPHEADER => array(  
    "-----------------------------------------------------------------------------------------------: SOME_STRING_VALUE",  
    "accept: text/plain",  
    "amount: SOME_STRING_VALUE",  
    "authkeyversion: SOME_STRING_VALUE",  
    "authorization: SOME_STRING_VALUE",  
    "content-type: SOME_STRING_VALUE",  
    "nonce: SOME_STRING_VALUE",  
    "signature: SOME_STRING_VALUE",  
    "signaturemethod: SOME_STRING_VALUE",  
    "timestamp: SOME_STRING_VALUE",  
    "transactionref: SOME_STRING_VALUE"  
  ),  
));  
  
$response = curl_exec($curl);  
$err = curl_error($curl);  
  
curl_close($curl);  
  
if ($err) {  
  echo "cURL Error #:" . $err;  
} else {  
  echo $response;  
}"
            },
            {
                "id": "swift_nsurlsession",
                "title": "Swift + Nsurlsession",
                "content": "import Foundation  
  
let headers = [  
  "accept": "text/plain",  
  "amount": "SOME_STRING_VALUE",  
  "transactionref": "SOME_STRING_VALUE",  
  "-----------------------------------------------------------------------------------------------": "SOME_STRING_VALUE",  
  "content-type": "SOME_STRING_VALUE",  
  "authorization": "SOME_STRING_VALUE",  
  "timestamp": "SOME_STRING_VALUE",  
  "nonce": "SOME_STRING_VALUE",  
  "signature": "SOME_STRING_VALUE",  
  "signaturemethod": "SOME_STRING_VALUE",  
  "authkeyversion": "SOME_STRING_VALUE"  
]  
  
var request = NSMutableURLRequest(URL: NSURL(string: "http://undefinedundefined/api/v3/purchases")!,  
                                        cachePolicy: .UseProtocolCachePolicy,  
                                    timeoutInterval: 10.0)  
request.HTTPMethod = "GET"  
request.allHTTPHeaderFields = headers  
  
let session = NSURLSession.sharedSession()  
let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in  
  if (error != nil) {  
    println(error)  
  } else {  
    let httpResponse = response as? NSHTTPURLResponse  
    println(httpResponse)  
  }  
})  
  
dataTask.resume()"
            },
            {
                "id": "objc_nsurlsession",
                "title": "Objc + Nsurlsession",
                "content": "#import <Foundation/Foundation.h>  
  
NSDictionary *headers = @{ @"accept": @"text/plain",  
                           @"amount": @"SOME_STRING_VALUE",  
                           @"transactionref": @"SOME_STRING_VALUE",  
                           @"-----------------------------------------------------------------------------------------------": @"SOME_STRING_VALUE",  
                           @"content-type": @"SOME_STRING_VALUE",  
                           @"authorization": @"SOME_STRING_VALUE",  
                           @"timestamp": @"SOME_STRING_VALUE",  
                           @"nonce": @"SOME_STRING_VALUE",  
                           @"signature": @"SOME_STRING_VALUE",  
                           @"signaturemethod": @"SOME_STRING_VALUE",  
                           @"authkeyversion": @"SOME_STRING_VALUE" };  
  
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://undefinedundefined/api/v3/purchases"]  
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy  
                                                   timeoutInterval:10.0];  
[request setHTTPMethod:@"GET"];  
[request setAllHTTPHeaderFields:headers];  
  
NSURLSession *session = [NSURLSession sharedSession];  
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request  
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {  
                                                if (error) {  
                                                    NSLog(@"%@", error);  
                                                } else {  
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;  
                                                    NSLog(@"%@", httpResponse);  
                                                }  
                                            }];  
[dataTask resume];"
            }
        ]
    },
    {
        "method": "POST",
        "url": "http://undefinedundefined/api/v3/purchases",
        "description": "null",
        "resource": "purchases",
        "snippets": [
            {
                "id": "csharp_restsharp",
                "title": "Csharp + Restsharp",
                "content": "var client = new RestClient("http://undefinedundefined/api/v3/purchases");  
var request = new RestRequest(Method.POST);  
request.AddHeader("authkeyversion", "SOME_STRING_VALUE");  
request.AddHeader("signaturemethod", "SOME_STRING_VALUE");  
request.AddHeader("signature", "SOME_STRING_VALUE");  
request.AddHeader("nonce", "SOME_STRING_VALUE");  
request.AddHeader("timestamp", "SOME_STRING_VALUE");  
request.AddHeader("authorization", "SOME_STRING_VALUE");  
request.AddHeader("content-type", "SOME_STRING_VALUE");  
request.AddHeader("accept", "text/plain");  
request.AddParameter("SOME_STRING_VALUE", "{\\"customerId\\":\\"<ADD STRING VALUE>\\",\\"amount\\":\\"<ADD STRING VALUE>\\",\\"authData\\":\\"<ADD STRING VALUE>\\",\\"currency\\":\\"<ADD STRING VALUE>\\",\\"transactionRef\\":\\"<ADD STRING VALUE>\\"}", ParameterType.RequestBody);  
IRestResponse response = client.Execute(request);"
            },
            {
                "id": "php_curl",
                "title": "Php + Curl",
                "content": "<?php  
  
$curl = curl_init();  
  
curl_setopt_array($curl, array(  
  CURLOPT_URL => "http://undefinedundefined/api/v3/purchases",  
  CURLOPT_RETURNTRANSFER => true,  
  CURLOPT_ENCODING => "",  
  CURLOPT_MAXREDIRS => 10,  
  CURLOPT_TIMEOUT => 30,  
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,  
  CURLOPT_CUSTOMREQUEST => "POST",  
  CURLOPT_POSTFIELDS => "{\\"customerId\\":\\"<ADD STRING VALUE>\\",\\"amount\\":\\"<ADD STRING VALUE>\\",\\"authData\\":\\"<ADD STRING VALUE>\\",\\"currency\\":\\"<ADD STRING VALUE>\\",\\"transactionRef\\":\\"<ADD STRING VALUE>\\"}",  
  CURLOPT_HTTPHEADER => array(  
    "accept: text/plain",  
    "authkeyversion: SOME_STRING_VALUE",  
    "authorization: SOME_STRING_VALUE",  
    "content-type: SOME_STRING_VALUE",  
    "nonce: SOME_STRING_VALUE",  
    "signature: SOME_STRING_VALUE",  
    "signaturemethod: SOME_STRING_VALUE",  
    "timestamp: SOME_STRING_VALUE"  
  ),  
));  
  
$response = curl_exec($curl);  
$err = curl_error($curl);  
  
curl_close($curl);  
  
if ($err) {  
  echo "cURL Error #:" . $err;  
} else {  
  echo $response;  
}"
            },
            {
                "id": "swift_nsurlsession",
                "title": "Swift + Nsurlsession",
                "content": "import Foundation  
  
let headers = [  
  "accept": "text/plain",  
  "content-type": "SOME_STRING_VALUE",  
  "authorization": "SOME_STRING_VALUE",  
  "timestamp": "SOME_STRING_VALUE",  
  "nonce": "SOME_STRING_VALUE",  
  "signature": "SOME_STRING_VALUE",  
  "signaturemethod": "SOME_STRING_VALUE",  
  "authkeyversion": "SOME_STRING_VALUE"  
]  
let parameters = [  
  "customerId": "<ADD STRING VALUE>",  
  "amount": "<ADD STRING VALUE>",  
  "authData": "<ADD STRING VALUE>",  
  "currency": "<ADD STRING VALUE>",  
  "transactionRef": "<ADD STRING VALUE>"  
]  
  
let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)  
  
var request = NSMutableURLRequest(URL: NSURL(string: "http://undefinedundefined/api/v3/purchases")!,  
                                        cachePolicy: .UseProtocolCachePolicy,  
                                    timeoutInterval: 10.0)  
request.HTTPMethod = "POST"  
request.allHTTPHeaderFields = headers  
request.HTTPBody = postData  
  
let session = NSURLSession.sharedSession()  
let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in  
  if (error != nil) {  
    println(error)  
  } else {  
    let httpResponse = response as? NSHTTPURLResponse  
    println(httpResponse)  
  }  
})  
  
dataTask.resume()"
            },
            {
                "id": "objc_nsurlsession",
                "title": "Objc + Nsurlsession",
                "content": "#import <Foundation/Foundation.h>  
  
NSDictionary *headers = @{ @"accept": @"text/plain",  
                           @"content-type": @"SOME_STRING_VALUE",  
                           @"authorization": @"SOME_STRING_VALUE",  
                           @"timestamp": @"SOME_STRING_VALUE",  
                           @"nonce": @"SOME_STRING_VALUE",  
                           @"signature": @"SOME_STRING_VALUE",  
                           @"signaturemethod": @"SOME_STRING_VALUE",  
                           @"authkeyversion": @"SOME_STRING_VALUE" };  
NSDictionary *parameters = @{ @"customerId": @"<ADD STRING VALUE>",  
                              @"amount": @"<ADD STRING VALUE>",  
                              @"authData": @"<ADD STRING VALUE>",  
                              @"currency": @"<ADD STRING VALUE>",  
                              @"transactionRef": @"<ADD STRING VALUE>" };  
  
NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];  
  
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://undefinedundefined/api/v3/purchases"]  
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy  
                                                   timeoutInterval:10.0];  
[request setHTTPMethod:@"POST"];  
[request setAllHTTPHeaderFields:headers];  
[request setHTTPBody:postData];  
  
NSURLSession *session = [NSURLSession sharedSession];  
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request  
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {  
                                                if (error) {  
                                                    NSLog(@"%@", error);  
                                                } else {  
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;  
                                                    NSLog(@"%@", httpResponse);  
                                                }  
                                            }];  
[dataTask resume];"
            }
        ]
    },
    {
        "method": "POST",
        "url": "http://undefinedundefined/api/v2/purchases/validations/recurrents",
        "description": "null",
        "resource": "recurrents",
        "snippets": [
            {
                "id": "csharp_restsharp",
                "title": "Csharp + Restsharp",
                "content": "var client = new RestClient("http://undefinedundefined/api/v2/purchases/validations/recurrents");  
var request = new RestRequest(Method.POST);  
request.AddHeader("authkeyversion", "SOME_STRING_VALUE");  
request.AddHeader("signaturemethod", "SOME_STRING_VALUE");  
request.AddHeader("signature", "SOME_STRING_VALUE");  
request.AddHeader("nonce", "SOME_STRING_VALUE");  
request.AddHeader("timestamp", "SOME_STRING_VALUE");  
request.AddHeader("authorization", "SOME_STRING_VALUE");  
request.AddHeader("content-type", "SOME_STRING_VALUE");  
request.AddHeader("accept", "text/plain");  
request.AddParameter("SOME_STRING_VALUE", "{\\"transactionRef\\":\\"<ADD STRING VALUE>\\",\\"authData\\":\\"<ADD STRING VALUE>\\"}", ParameterType.RequestBody);  
IRestResponse response = client.Execute(request);"
            },
            {
                "id": "php_curl",
                "title": "Php + Curl",
                "content": "<?php  
  
$curl = curl_init();  
  
curl_setopt_array($curl, array(  
  CURLOPT_URL => "http://undefinedundefined/api/v2/purchases/validations/recurrents",  
  CURLOPT_RETURNTRANSFER => true,  
  CURLOPT_ENCODING => "",  
  CURLOPT_MAXREDIRS => 10,  
  CURLOPT_TIMEOUT => 30,  
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,  
  CURLOPT_CUSTOMREQUEST => "POST",  
  CURLOPT_POSTFIELDS => "{\\"transactionRef\\":\\"<ADD STRING VALUE>\\",\\"authData\\":\\"<ADD STRING VALUE>\\"}",  
  CURLOPT_HTTPHEADER => array(  
    "accept: text/plain",  
    "authkeyversion: SOME_STRING_VALUE",  
    "authorization: SOME_STRING_VALUE",  
    "content-type: SOME_STRING_VALUE",  
    "nonce: SOME_STRING_VALUE",  
    "signature: SOME_STRING_VALUE",  
    "signaturemethod: SOME_STRING_VALUE",  
    "timestamp: SOME_STRING_VALUE"  
  ),  
));  
  
$response = curl_exec($curl);  
$err = curl_error($curl);  
  
curl_close($curl);  
  
if ($err) {  
  echo "cURL Error #:" . $err;  
} else {  
  echo $response;  
}"
            },
            {
                "id": "swift_nsurlsession",
                "title": "Swift + Nsurlsession",
                "content": "import Foundation  
  
let headers = [  
  "accept": "text/plain",  
  "content-type": "SOME_STRING_VALUE",  
  "authorization": "SOME_STRING_VALUE",  
  "timestamp": "SOME_STRING_VALUE",  
  "nonce": "SOME_STRING_VALUE",  
  "signature": "SOME_STRING_VALUE",  
  "signaturemethod": "SOME_STRING_VALUE",  
  "authkeyversion": "SOME_STRING_VALUE"  
]  
let parameters = [  
  "transactionRef": "<ADD STRING VALUE>",  
  "authData": "<ADD STRING VALUE>"  
]  
  
let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)  
  
var request = NSMutableURLRequest(URL: NSURL(string: "http://undefinedundefined/api/v2/purchases/validations/recurrents")!,  
                                        cachePolicy: .UseProtocolCachePolicy,  
                                    timeoutInterval: 10.0)  
request.HTTPMethod = "POST"  
request.allHTTPHeaderFields = headers  
request.HTTPBody = postData  
  
let session = NSURLSession.sharedSession()  
let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in  
  if (error != nil) {  
    println(error)  
  } else {  
    let httpResponse = response as? NSHTTPURLResponse  
    println(httpResponse)  
  }  
})  
  
dataTask.resume()"
            },
            {
                "id": "objc_nsurlsession",
                "title": "Objc + Nsurlsession",
                "content": "#import <Foundation/Foundation.h>  
  
NSDictionary *headers = @{ @"accept": @"text/plain",  
                           @"content-type": @"SOME_STRING_VALUE",  
                           @"authorization": @"SOME_STRING_VALUE",  
                           @"timestamp": @"SOME_STRING_VALUE",  
                           @"nonce": @"SOME_STRING_VALUE",  
                           @"signature": @"SOME_STRING_VALUE",  
                           @"signaturemethod": @"SOME_STRING_VALUE",  
                           @"authkeyversion": @"SOME_STRING_VALUE" };  
NSDictionary *parameters = @{ @"transactionRef": @"<ADD STRING VALUE>",  
                              @"authData": @"<ADD STRING VALUE>" };  
  
NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];  
  
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://undefinedundefined/api/v2/purchases/validations/recurrents"]  
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy  
                                                   timeoutInterval:10.0];  
[request setHTTPMethod:@"POST"];  
[request setAllHTTPHeaderFields:headers];  
[request setHTTPBody:postData];  
  
NSURLSession *session = [NSURLSession sharedSession];  
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request  
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {  
                                                if (error) {  
                                                    NSLog(@"%@", error);  
                                                } else {  
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;  
                                                    NSLog(@"%@", httpResponse);  
                                                }  
                                            }];  
[dataTask resume];"
            }
        ]
    },
    {
        "method": "POST",
        "url": "http://undefinedundefined/api/v2/purchases/recurrents",
        "description": "null",
        "resource": "recurrents",
        "snippets": [
            {
                "id": "csharp_restsharp",
                "title": "Csharp + Restsharp",
                "content": "var client = new RestClient("http://undefinedundefined/api/v2/purchases/recurrents");  
var request = new RestRequest(Method.POST);  
request.AddHeader("authkeyversion", "SOME_STRING_VALUE");  
request.AddHeader("signaturemethod", "SOME_STRING_VALUE");  
request.AddHeader("signature", "SOME_STRING_VALUE");  
request.AddHeader("nonce", "SOME_STRING_VALUE");  
request.AddHeader("timestamp", "SOME_STRING_VALUE");  
request.AddHeader("authorization", "SOME_STRING_VALUE");  
request.AddHeader("content-type", "SOME_STRING_VALUE");  
request.AddHeader("accept", "text/plain");  
request.AddParameter("SOME_STRING_VALUE", "{\\"customerId\\":\\"<ADD STRING VALUE>\\",\\"amount\\":\\"<ADD STRING VALUE>\\",\\"currency\\":\\"<ADD STRING VALUE>\\",\\"token\\":\\"<ADD STRING VALUE>\\",\\"tokenExpiryDate\\":\\"<ADD STRING VALUE>\\",\\"transactionRef\\":\\"<ADD STRING VALUE>\\"}", ParameterType.RequestBody);  
IRestResponse response = client.Execute(request);"
            },
            {
                "id": "php_curl",
                "title": "Php + Curl",
                "content": "<?php  
  
$curl = curl_init();  
  
curl_setopt_array($curl, array(  
  CURLOPT_URL => "http://undefinedundefined/api/v2/purchases/recurrents",  
  CURLOPT_RETURNTRANSFER => true,  
  CURLOPT_ENCODING => "",  
  CURLOPT_MAXREDIRS => 10,  
  CURLOPT_TIMEOUT => 30,  
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,  
  CURLOPT_CUSTOMREQUEST => "POST",  
  CURLOPT_POSTFIELDS => "{\\"customerId\\":\\"<ADD STRING VALUE>\\",\\"amount\\":\\"<ADD STRING VALUE>\\",\\"currency\\":\\"<ADD STRING VALUE>\\",\\"token\\":\\"<ADD STRING VALUE>\\",\\"tokenExpiryDate\\":\\"<ADD STRING VALUE>\\",\\"transactionRef\\":\\"<ADD STRING VALUE>\\"}",  
  CURLOPT_HTTPHEADER => array(  
    "accept: text/plain",  
    "authkeyversion: SOME_STRING_VALUE",  
    "authorization: SOME_STRING_VALUE",  
    "content-type: SOME_STRING_VALUE",  
    "nonce: SOME_STRING_VALUE",  
    "signature: SOME_STRING_VALUE",  
    "signaturemethod: SOME_STRING_VALUE",  
    "timestamp: SOME_STRING_VALUE"  
  ),  
));  
  
$response = curl_exec($curl);  
$err = curl_error($curl);  
  
curl_close($curl);  
  
if ($err) {  
  echo "cURL Error #:" . $err;  
} else {  
  echo $response;  
}"
            },
            {
                "id": "swift_nsurlsession",
                "title": "Swift + Nsurlsession",
                "content": "import Foundation  
  
let headers = [  
  "accept": "text/plain",  
  "content-type": "SOME_STRING_VALUE",  
  "authorization": "SOME_STRING_VALUE",  
  "timestamp": "SOME_STRING_VALUE",  
  "nonce": "SOME_STRING_VALUE",  
  "signature": "SOME_STRING_VALUE",  
  "signaturemethod": "SOME_STRING_VALUE",  
  "authkeyversion": "SOME_STRING_VALUE"  
]  
let parameters = [  
  "customerId": "<ADD STRING VALUE>",  
  "amount": "<ADD STRING VALUE>",  
  "currency": "<ADD STRING VALUE>",  
  "token": "<ADD STRING VALUE>",  
  "tokenExpiryDate": "<ADD STRING VALUE>",  
  "transactionRef": "<ADD STRING VALUE>"  
]  
  
let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)  
  
var request = NSMutableURLRequest(URL: NSURL(string: "http://undefinedundefined/api/v2/purchases/recurrents")!,  
                                        cachePolicy: .UseProtocolCachePolicy,  
                                    timeoutInterval: 10.0)  
request.HTTPMethod = "POST"  
request.allHTTPHeaderFields = headers  
request.HTTPBody = postData  
  
let session = NSURLSession.sharedSession()  
let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in  
  if (error != nil) {  
    println(error)  
  } else {  
    let httpResponse = response as? NSHTTPURLResponse  
    println(httpResponse)  
  }  
})  
  
dataTask.resume()"
            },
            {
                "id": "objc_nsurlsession",
                "title": "Objc + Nsurlsession",
                "content": "#import <Foundation/Foundation.h>  
  
NSDictionary *headers = @{ @"accept": @"text/plain",  
                           @"content-type": @"SOME_STRING_VALUE",  
                           @"authorization": @"SOME_STRING_VALUE",  
                           @"timestamp": @"SOME_STRING_VALUE",  
                           @"nonce": @"SOME_STRING_VALUE",  
                           @"signature": @"SOME_STRING_VALUE",  
                           @"signaturemethod": @"SOME_STRING_VALUE",  
                           @"authkeyversion": @"SOME_STRING_VALUE" };  
NSDictionary *parameters = @{ @"customerId": @"<ADD STRING VALUE>",  
                              @"amount": @"<ADD STRING VALUE>",  
                              @"currency": @"<ADD STRING VALUE>",  
                              @"token": @"<ADD STRING VALUE>",  
                              @"tokenExpiryDate": @"<ADD STRING VALUE>",  
                              @"transactionRef": @"<ADD STRING VALUE>" };  
  
NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];  
  
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://undefinedundefined/api/v2/purchases/recurrents"]  
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy  
                                                   timeoutInterval:10.0];  
[request setHTTPMethod:@"POST"];  
[request setAllHTTPHeaderFields:headers];  
[request setHTTPBody:postData];  
  
NSURLSession *session = [NSURLSession sharedSession];  
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request  
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {  
                                                if (error) {  
                                                    NSLog(@"%@", error);  
                                                } else {  
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;  
                                                    NSLog(@"%@", httpResponse);  
                                                }  
                                            }];  
[dataTask resume];"
            }
        ]
    },
    {
        "method": "POST",
        "url": "http://undefinedundefined/passport/oauth/token",
        "description": "No description available",
        "resource": "token",
        "snippets": [
            {
                "id": "csharp_restsharp",
                "title": "Csharp + Restsharp",
                "content": "var client = new RestClient("http://undefinedundefined/passport/oauth/token");  
var request = new RestRequest(Method.POST);  
request.AddHeader("authorization", "SOME_STRING_VALUE");  
request.AddHeader("content-type", "SOME_STRING_VALUE");  
request.AddHeader("accept", "application/x-www-form-urlencoded");  
IRestResponse response = client.Execute(request);"
            },
            {
                "id": "php_curl",
                "title": "Php + Curl",
                "content": "<?php  
  
$curl = curl_init();  
  
curl_setopt_array($curl, array(  
  CURLOPT_URL => "http://undefinedundefined/passport/oauth/token",  
  CURLOPT_RETURNTRANSFER => true,  
  CURLOPT_ENCODING => "",  
  CURLOPT_MAXREDIRS => 10,  
  CURLOPT_TIMEOUT => 30,  
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,  
  CURLOPT_CUSTOMREQUEST => "POST",  
  CURLOPT_HTTPHEADER => array(  
    "accept: application/x-www-form-urlencoded",  
    "authorization: SOME_STRING_VALUE",  
    "content-type: SOME_STRING_VALUE"  
  ),  
));  
  
$response = curl_exec($curl);  
$err = curl_error($curl);  
  
curl_close($curl);  
  
if ($err) {  
  echo "cURL Error #:" . $err;  
} else {  
  echo $response;  
}"
            },
            {
                "id": "swift_nsurlsession",
                "title": "Swift + Nsurlsession",
                "content": "import Foundation  
  
let headers = [  
  "accept": "application/x-www-form-urlencoded",  
  "content-type": "SOME_STRING_VALUE",  
  "authorization": "SOME_STRING_VALUE"  
]  
  
var request = NSMutableURLRequest(URL: NSURL(string: "http://undefinedundefined/passport/oauth/token")!,  
                                        cachePolicy: .UseProtocolCachePolicy,  
                                    timeoutInterval: 10.0)  
request.HTTPMethod = "POST"  
request.allHTTPHeaderFields = headers  
  
let session = NSURLSession.sharedSession()  
let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in  
  if (error != nil) {  
    println(error)  
  } else {  
    let httpResponse = response as? NSHTTPURLResponse  
    println(httpResponse)  
  }  
})  
  
dataTask.resume()"
            },
            {
                "id": "objc_nsurlsession",
                "title": "Objc + Nsurlsession",
                "content": "#import <Foundation/Foundation.h>  
  
NSDictionary *headers = @{ @"accept": @"application/x-www-form-urlencoded",  
                           @"content-type": @"SOME_STRING_VALUE",  
                           @"authorization": @"SOME_STRING_VALUE" };  
  
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://undefinedundefined/passport/oauth/token"]  
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy  
                                                   timeoutInterval:10.0];  
[request setHTTPMethod:@"POST"];  
[request setAllHTTPHeaderFields:headers];  
  
NSURLSession *session = [NSURLSession sharedSession];  
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request  
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {  
                                                if (error) {  
                                                    NSLog(@"%@", error);  
                                                } else {  
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;  
                                                    NSLog(@"%@", httpResponse);  
                                                }  
                                            }];  
[dataTask resume];"
            }
        ]
    },
    {
        "method": "POST",
        "url": "http://undefinedundefined/api/v3/purchases/validations",
        "description": "No description available",
        "resource": "validations",
        "snippets": [
            {
                "id": "csharp_restsharp",
                "title": "Csharp + Restsharp",
                "content": "var client = new RestClient("http://undefinedundefined/api/v3/purchases/validations");  
var request = new RestRequest(Method.POST);  
request.AddHeader("authkeyversion", "SOME_STRING_VALUE");  
request.AddHeader("signaturemethod", "SOME_STRING_VALUE");  
request.AddHeader("signature", "SOME_STRING_VALUE");  
request.AddHeader("nonce", "SOME_STRING_VALUE");  
request.AddHeader("timestamp", "SOME_STRING_VALUE");  
request.AddHeader("authorization", "SOME_STRING_VALUE");  
request.AddHeader("content-type", "SOME_STRING_VALUE");  
request.AddHeader("accept", "text/plain");  
request.AddParameter("SOME_STRING_VALUE", "{\\"transactionRef\\":\\"<ADD STRING VALUE>\\",\\"authData\\":\\"<ADD STRING VALUE>\\"}", ParameterType.RequestBody);  
IRestResponse response = client.Execute(request);"
            },
            {
                "id": "php_curl",
                "title": "Php + Curl",
                "content": "<?php  
  
$curl = curl_init();  
  
curl_setopt_array($curl, array(  
  CURLOPT_URL => "http://undefinedundefined/api/v3/purchases/validations",  
  CURLOPT_RETURNTRANSFER => true,  
  CURLOPT_ENCODING => "",  
  CURLOPT_MAXREDIRS => 10,  
  CURLOPT_TIMEOUT => 30,  
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,  
  CURLOPT_CUSTOMREQUEST => "POST",  
  CURLOPT_POSTFIELDS => "{\\"transactionRef\\":\\"<ADD STRING VALUE>\\",\\"authData\\":\\"<ADD STRING VALUE>\\"}",  
  CURLOPT_HTTPHEADER => array(  
    "accept: text/plain",  
    "authkeyversion: SOME_STRING_VALUE",  
    "authorization: SOME_STRING_VALUE",  
    "content-type: SOME_STRING_VALUE",  
    "nonce: SOME_STRING_VALUE",  
    "signature: SOME_STRING_VALUE",  
    "signaturemethod: SOME_STRING_VALUE",  
    "timestamp: SOME_STRING_VALUE"  
  ),  
));  
  
$response = curl_exec($curl);  
$err = curl_error($curl);  
  
curl_close($curl);  
  
if ($err) {  
  echo "cURL Error #:" . $err;  
} else {  
  echo $response;  
}"
            },
            {
                "id": "swift_nsurlsession",
                "title": "Swift + Nsurlsession",
                "content": "import Foundation  
  
let headers = [  
  "accept": "text/plain",  
  "content-type": "SOME_STRING_VALUE",  
  "authorization": "SOME_STRING_VALUE",  
  "timestamp": "SOME_STRING_VALUE",  
  "nonce": "SOME_STRING_VALUE",  
  "signature": "SOME_STRING_VALUE",  
  "signaturemethod": "SOME_STRING_VALUE",  
  "authkeyversion": "SOME_STRING_VALUE"  
]  
let parameters = [  
  "transactionRef": "<ADD STRING VALUE>",  
  "authData": "<ADD STRING VALUE>"  
]  
  
let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)  
  
var request = NSMutableURLRequest(URL: NSURL(string: "http://undefinedundefined/api/v3/purchases/validations")!,  
                                        cachePolicy: .UseProtocolCachePolicy,  
                                    timeoutInterval: 10.0)  
request.HTTPMethod = "POST"  
request.allHTTPHeaderFields = headers  
request.HTTPBody = postData  
  
let session = NSURLSession.sharedSession()  
let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in  
  if (error != nil) {  
    println(error)  
  } else {  
    let httpResponse = response as? NSHTTPURLResponse  
    println(httpResponse)  
  }  
})  
  
dataTask.resume()"
            },
            {
                "id": "objc_nsurlsession",
                "title": "Objc + Nsurlsession",
                "content": "#import <Foundation/Foundation.h>  
  
NSDictionary *headers = @{ @"accept": @"text/plain",  
                           @"content-type": @"SOME_STRING_VALUE",  
                           @"authorization": @"SOME_STRING_VALUE",  
                           @"timestamp": @"SOME_STRING_VALUE",  
                           @"nonce": @"SOME_STRING_VALUE",  
                           @"signature": @"SOME_STRING_VALUE",  
                           @"signaturemethod": @"SOME_STRING_VALUE",  
                           @"authkeyversion": @"SOME_STRING_VALUE" };  
NSDictionary *parameters = @{ @"transactionRef": @"<ADD STRING VALUE>",  
                              @"authData": @"<ADD STRING VALUE>" };  
  
NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];  
  
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://undefinedundefined/api/v3/purchases/validations"]  
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy  
                                                   timeoutInterval:10.0];  
[request setHTTPMethod:@"POST"];  
[request setAllHTTPHeaderFields:headers];  
[request setHTTPBody:postData];  
  
NSURLSession *session = [NSURLSession sharedSession];  
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request  
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {  
                                                if (error) {  
                                                    NSLog(@"%@", error);  
                                                } else {  
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;  
                                                    NSLog(@"%@", httpResponse);  
                                                }  
                                            }];  
[dataTask resume];"
            }
        ]
    }
]