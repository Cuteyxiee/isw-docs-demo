{
    "id": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
    "name": "1 - Merchant X V3",
    "description": "",
    "auth": null,
    "events": null,
    "variables": [],
    "order": [],
    "folders_order": [
        "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9"
    ],
    "folders": [
        {
            "id": "4dd5ef12-5772-4ba0-b54c-5ee021789918",
            "name": "1 - Basic Purchase",
            "description": "This contains details about initiating a basic purchase using Interswitch's APIs for your transactions.\n\nThis exalains how you can make a basic transasction using the payload defined below in the sections you would come across.\n\nThe first section illustrates how to make a passport request which requires ",
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "a7f7299c-f568-4610-b61c-aaa45c58b57c",
                        "type": "text\/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "e19c3234-6cad-45f3-8139-9652a8f84785",
                        "type": "text\/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ],
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "order": [
                "03f353b3-d1a6-42b1-8c59-6983cbba3bfe",
                "ba4830c6-ee4a-491b-bca4-d0f26b7f416d"
            ],
            "folders_order": [],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "4dd5ef12-5772-4ba0-b54c-5ee021789918"
        },
        {
            "id": "01ba8ad3-76ce-46af-b8f6-491876c55ec7",
            "name": "1 - Basic Purchase - SHA512",
            "description": "",
            "auth": null,
            "events": null,
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "order": [
                "18141c69-47cc-415c-87d3-b3751812d06d",
                "63345129-a3c1-4d76-8c69-f3cfb9b80958"
            ],
            "folders_order": [],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "01ba8ad3-76ce-46af-b8f6-491876c55ec7"
        },
        {
            "id": "d1cdc035-c0f6-488d-8305-d0c9d206971f",
            "name": "1 - Basic Purchase - {{Card}}",
            "description": "",
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "7ed28fc4-69a4-4a47-bbea-f4186f5bc72c",
                        "type": "text\/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "4d6963b8-5d1e-484f-9295-b9135384d912",
                        "type": "text\/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ],
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "order": [
                "486249e7-5016-4b80-9d77-50872411647b",
                "48902708-099c-4b1e-963d-b44bd75cffb3",
                "e0cc637b-7967-461a-af40-a5febe430e0d"
            ],
            "folders_order": [],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "d1cdc035-c0f6-488d-8305-d0c9d206971f"
        },
        {
            "id": "6125dfee-e7f3-40c8-a9cd-569d9da26683",
            "name": "2 - OTP Purchase",
            "description": "",
            "auth": null,
            "events": null,
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "order": [
                "24e043be-bb4e-4d60-b5a6-c77edbc4ade3",
                "6a418e63-0841-49ea-9284-3211fa7790e1",
                "b3415eab-7e99-4716-b588-5442ddd0633b"
            ],
            "folders_order": [],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "6125dfee-e7f3-40c8-a9cd-569d9da26683"
        },
        {
            "id": "15bf76e0-e11a-45b3-b8b0-80bb764dec85",
            "name": "2 - Payment Token Purchase",
            "description": "",
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "548e3a63-f7b6-4c69-88c7-5be2ddbb4a84",
                        "type": "text\/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "979dcab4-17bd-4729-b7c5-b66bc769b88c",
                        "type": "text\/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ],
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "order": [
                "3860691d-5737-4991-afb4-fdd1d691b275",
                "a324d2d3-5d20-4a5c-b286-9518b3614e18",
                "c2244c4b-ba23-4f37-80db-3e1a8a818f0f"
            ],
            "folders_order": [],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "15bf76e0-e11a-45b3-b8b0-80bb764dec85"
        },
        {
            "id": "9f3f9f1a-3366-4628-9282-3c8731dce6d0",
            "name": "3 - VISA Cardinal Transaction (NoPIN)",
            "description": "",
            "auth": null,
            "events": null,
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "order": [
                "3d229c91-5d8c-4b19-8ccf-34a63346cadc",
                "8773a082-d85f-49b0-bece-1dad3461ed96",
                "b055eb16-b7ea-477f-b99c-0394e0a896d3",
                "d5141d54-d276-442a-87c4-6dc70c1ea68f",
                "e1b1a9b0-2755-4494-aaea-62f3ea093aa2"
            ],
            "folders_order": [],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "9f3f9f1a-3366-4628-9282-3c8731dce6d0"
        },
        {
            "id": "65f68ed7-e8d0-4e09-96f7-dbfc15a332b7",
            "name": "4 - AutoEnrolment (M0 Transaction)",
            "description": "",
            "auth": null,
            "events": null,
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "order": [
                "6f22370b-aff3-4b2d-b828-182c3a1e62b3",
                "8f97d2b5-2bcf-4a9b-83a2-628a73340c69",
                "c5c81d08-cb53-4d8b-8af8-d3cdeed3c110",
                "fd60d6b7-fc42-472e-ac1d-0208096caa01"
            ],
            "folders_order": [],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "65f68ed7-e8d0-4e09-96f7-dbfc15a332b7"
        },
        {
            "id": "3f0e2bab-c10b-46b3-9123-b10238911ded",
            "name": "5 - Card Validation (Adding Card)",
            "description": "",
            "auth": null,
            "events": null,
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "order": [
                "5618ca95-9f7a-4f3f-bd09-bd5381c5e74c",
                "7b7a2fb5-e3e2-425a-88fd-53f1c078f667",
                "c4527547-c25d-4a08-a0b0-ea96a1f1caff"
            ],
            "folders_order": [],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "3f0e2bab-c10b-46b3-9123-b10238911ded"
        },
        {
            "id": "523678fc-9b3e-4567-b4c3-98e4c5c5df73",
            "name": "6 - Recurring",
            "description": "",
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "fe2213a2-ba25-47b0-a600-06ba0539ac63",
                        "type": "text\/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "0bd74e9b-b081-43f3-9128-d2c4ef02c7ea",
                        "type": "text\/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ],
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "order": [
                "1ce8e145-5bdb-4a23-9ab2-65712fdf7586",
                "70463a62-8471-49c1-9883-f7e52e12eff2",
                "ceef4535-f140-4ef0-b8f0-ce2c02390558"
            ],
            "folders_order": [],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "523678fc-9b3e-4567-b4c3-98e4c5c5df73"
        },
        {
            "id": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "name": "Sandbox",
            "description": "",
            "auth": null,
            "events": null,
            "collection": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folder": null,
            "order": [
                "1b71950f-171c-4d11-8848-a5b1cd29bed5",
                "3dc64faa-2351-4a00-a87b-cab9f5d959e9",
                "732eb5ff-7493-42b2-a1ed-f7c5be53ac49",
                "89490369-e711-4940-a6b5-679f478932c8"
            ],
            "folders_order": [
                "4dd5ef12-5772-4ba0-b54c-5ee021789918",
                "01ba8ad3-76ce-46af-b8f6-491876c55ec7",
                "d1cdc035-c0f6-488d-8305-d0c9d206971f",
                "6125dfee-e7f3-40c8-a9cd-569d9da26683",
                "15bf76e0-e11a-45b3-b8b0-80bb764dec85",
                "9f3f9f1a-3366-4628-9282-3c8731dce6d0",
                "65f68ed7-e8d0-4e09-96f7-dbfc15a332b7",
                "3f0e2bab-c10b-46b3-9123-b10238911ded",
                "523678fc-9b3e-4567-b4c3-98e4c5c5df73"
            ],
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "folderId": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9"
        }
    ],
    "requests": [
        {
            "id": "03f353b3-d1a6-42b1-8c59-6983cbba3bfe",
            "name": "Passport Request",
            "url": "https:\/\/sandbox.interswitchng.com\/passport\/oauth\/token",
            "description": "",
            "data": [
                {
                    "key": "grant_type",
                    "value": "client_credentials",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "description": "",
                    "type": "text"
                },
                {
                    "key": "Authorization",
                    "value": "{{Authorization}}",
                    "enabled": true,
                    "description": ""
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "8d1280dc-0dc8-4fc8-a380-136d65882466",
                        "exec": [
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "\/\/Calculate Authorisation",
                            "var authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);",
                            "",
                            "\/\/Set Environment Variable",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);",
                            ""
                        ],
                        "type": "text\/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "f304a7b6-b2b8-4812-b430-767c1a86ebe0",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);"
                        ],
                        "type": "text\/javascript"
                    }
                }
            ],
            "folder": "4dd5ef12-5772-4ba0-b54c-5ee021789918",
            "preRequestScript": "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\/\/Calculate Authorisation\nvar authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);\n\n\/\/Set Environment Variable\npostman.setEnvironmentVariable(\"Authorization\", authorization);\n",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\nAuthorization: {{Authorization}}\n",
            "pathVariables": []
        },
        {
            "id": "18141c69-47cc-415c-87d3-b3751812d06d",
            "name": "Purchase With Card",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": null,
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "SHA512",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "3ff7ddec-6ce5-46e6-b41a-b0adc521edaa",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/**",
                            " * SHA-512 hash function reference implementation.",
                            " *",
                            " * This is an annotated direct implementation of FIPS 180-4, without any optimisations. It is",
                            " * intended to aid understanding of the algorithm rather than for production use.",
                            " *",
                            " * While it could be used where performance is not critical, I would recommend using the \u2018Web",
                            " * Cryptography API\u2019 (developer.mozilla.org\/en-US\/docs\/Web\/API\/SubtleCrypto\/digest) for the browser,",
                            " * or the \u2018crypto\u2019 library (nodejs.org\/api\/crypto.html#crypto_class_hash) in Node.js.",
                            " *",
                            " * SHA-512 is more difficult to implement in JavaScript than SHA-256, as it is based on 64-bit",
                            " * (unsigned) integers, which are not natively supported in JavaScript (in which all numbers are",
                            " * IEEE 754 64-bit floating-point numbers). A 'Long' library here provides UInt64-style support.",
                            " *",
                            " * See csrc.nist.gov\/groups\/ST\/toolkit\/secure_hashing.html",
                            " *     csrc.nist.gov\/groups\/ST\/toolkit\/examples.html",
                            " *\/",
                            "class Sha512 {",
                            "",
                            "    \/**",
                            "     * Generates SHA-512 hash of string.",
                            "     *",
                            "     * @param   {string} msg - (Unicode) string to be hashed.",
                            "     * @param   {Object} [options]",
                            "     * @param   {string} [options.msgFormat=string] - Message format: 'string' for JavaScript string",
                            "     *   (gets converted to UTF-8 for hashing); 'hex-bytes' for string of hex bytes ('616263' = 'abc') .",
                            "     * @param   {string} [options.outFormat=hex] - Output format: 'hex' for string of contiguous",
                            "     *   hex bytes; 'hex-w' for grouping hex bytes into groups of (8 byte \/ 16 character) words.",
                            "     * @returns {string} Hash of msg as hex character string.",
                            "     *\/",
                            "    static hash(msg, options) {",
                            "        const defaults = { msgFormat: 'string', outFormat: 'hex' };",
                            "        const opt = Object.assign(defaults, options);",
                            "",
                            "        switch (opt.msgFormat) {",
                            "            default: \/\/ default is to convert string to UTF-8, as SHA only deals with byte-streams",
                            "            case 'string':   msg = utf8Encode(msg);       break;",
                            "            case 'hex-bytes':msg = hexBytesToString(msg); break; \/\/ mostly for running tests",
                            "        }",
                            "",
                            "        \/\/ constants [\u00a74.2.3]",
                            "        const K = [",
                            "            '428a2f98d728ae22', '7137449123ef65cd', 'b5c0fbcfec4d3b2f', 'e9b5dba58189dbbc',",
                            "            '3956c25bf348b538', '59f111f1b605d019', '923f82a4af194f9b', 'ab1c5ed5da6d8118',",
                            "            'd807aa98a3030242', '12835b0145706fbe', '243185be4ee4b28c', '550c7dc3d5ffb4e2',",
                            "            '72be5d74f27b896f', '80deb1fe3b1696b1', '9bdc06a725c71235', 'c19bf174cf692694',",
                            "            'e49b69c19ef14ad2', 'efbe4786384f25e3', '0fc19dc68b8cd5b5', '240ca1cc77ac9c65',",
                            "            '2de92c6f592b0275', '4a7484aa6ea6e483', '5cb0a9dcbd41fbd4', '76f988da831153b5',",
                            "            '983e5152ee66dfab', 'a831c66d2db43210', 'b00327c898fb213f', 'bf597fc7beef0ee4',",
                            "            'c6e00bf33da88fc2', 'd5a79147930aa725', '06ca6351e003826f', '142929670a0e6e70',",
                            "            '27b70a8546d22ffc', '2e1b21385c26c926', '4d2c6dfc5ac42aed', '53380d139d95b3df',",
                            "            '650a73548baf63de', '766a0abb3c77b2a8', '81c2c92e47edaee6', '92722c851482353b',",
                            "            'a2bfe8a14cf10364', 'a81a664bbc423001', 'c24b8b70d0f89791', 'c76c51a30654be30',",
                            "            'd192e819d6ef5218', 'd69906245565a910', 'f40e35855771202a', '106aa07032bbd1b8',",
                            "            '19a4c116b8d2d0c8', '1e376c085141ab53', '2748774cdf8eeb99', '34b0bcb5e19b48a8',",
                            "            '391c0cb3c5c95a63', '4ed8aa4ae3418acb', '5b9cca4f7763e373', '682e6ff3d6b2b8a3',",
                            "            '748f82ee5defb2fc', '78a5636f43172f60', '84c87814a1f0ab72', '8cc702081a6439ec',",
                            "            '90befffa23631e28', 'a4506cebde82bde9', 'bef9a3f7b2c67915', 'c67178f2e372532b',",
                            "            'ca273eceea26619c', 'd186b8c721c0c207', 'eada7dd6cde0eb1e', 'f57d4f7fee6ed178',",
                            "            '06f067aa72176fba', '0a637dc5a2c898a6', '113f9804bef90dae', '1b710b35131c471b',",
                            "            '28db77f523047d84', '32caab7b40c72493', '3c9ebe0a15c9bebc', '431d67c49c100d4c',",
                            "            '4cc5d4becb3e42b6', '597f299cfc657e2a', '5fcb6fab3ad6faec', '6c44198c4a475817',",
                            "        ].map(k => Sha512.Long.fromString(k));",
                            "",
                            "        \/\/ initial hash value [\u00a75.3.5]",
                            "        const H = [",
                            "            '6a09e667f3bcc908', 'bb67ae8584caa73b', '3c6ef372fe94f82b', 'a54ff53a5f1d36f1',",
                            "            '510e527fade682d1', '9b05688c2b3e6c1f', '1f83d9abfb41bd6b', '5be0cd19137e2179',",
                            "        ].map(h => Sha512.Long.fromString(h));",
                            "",
                            "        \/\/ PREPROCESSING [\u00a76.4.1]",
                            "",
                            "        msg += String.fromCharCode(0x80);  \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.2]",
                            "",
                            "        \/\/ convert string msg into 1024-bit blocks (array of 16 uint64) [\u00a75.2.2]",
                            "        const l = msg.length\/8 + 2; \/\/ length (in 64-bit longs) of msg + \u20181\u2019 + appended length",
                            "        const N = Math.ceil(l\/16);  \/\/ number of 16-long (1024-bit) blocks required to hold 'l' ints",
                            "        const M = new Array(N);     \/\/ message M is N\u00d716 array of 64-bit integers",
                            "",
                            "        for (let i=0; i<N; i++) {",
                            "            M[i] = new Array(16);",
                            "            for (let j=0; j<16; j++) { \/\/ encode 8 chars per uint64 (128 per block), big-endian encoding",
                            "                const lo = (msg.charCodeAt(i*128+j*8+0)<<24) | (msg.charCodeAt(i*128+j*8+1)<<16)",
                            "                         | (msg.charCodeAt(i*128+j*8+2)<< 8) | (msg.charCodeAt(i*128+j*8+3)<< 0);",
                            "                const hi = (msg.charCodeAt(i*128+j*8+4)<<24) | (msg.charCodeAt(i*128+j*8+5)<<16)",
                            "                         | (msg.charCodeAt(i*128+j*8+6)<< 8) | (msg.charCodeAt(i*128+j*8+7)<< 0);",
                            "                M[i][j] = new Sha512.Long(lo, hi);",
                            "            } \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "        }",
                            "        \/\/ add length (in bits) into final pair of 64-bit integers (big-endian) [\u00a75.1.2]",
                            "        M[N-1][14] = new Sha512.Long(0, 0); \/\/ tooo hard... limit msg to 2 million terabytes",
                            "        \/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "        \/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "        const lenHi = ((msg.length-1)*8) \/ Math.pow(2, 32);",
                            "        const lenLo = ((msg.length-1)*8) >>> 0; \/\/ note '>>> 0' coerces number to unsigned 32-bit integer",
                            "        M[N-1][15] = new Sha512.Long(Math.floor(lenHi), lenLo);",
                            "",
                            "",
                            "        \/\/ HASH COMPUTATION [\u00a76.4.2]",
                            "",
                            "        for (let i=0; i<N; i++) {",
                            "            const W = new Array(80);",
                            "",
                            "            \/\/ 1 - prepare message schedule 'W'",
                            "            for (let t=0;  t<16; t++) W[t] = M[i][t];",
                            "            for (let t=16; t<80; t++) {",
                            "                W[t] = (Sha512.s1(W[t-2]).add(W[t-7]).add(Sha512.s0(W[t-15])).add(W[t-16]));",
                            "            }",
                            "",
                            "            \/\/ 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value",
                            "            let a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], f = H[5], g = H[6], h = H[7];",
                            "",
                            "            \/\/ 3 - main loop (note 'addition modulo 2^64')",
                            "            for (let t=0; t<80; t++) {",
                            "                const T1 = h.add(Sha512.S1(e)).add(Sha512.Ch(e, f, g)).add(K[t]).add(W[t]);",
                            "                const T2 = Sha512.S0(a).add(Sha512.Maj(a, b, c));",
                            "                h = g;",
                            "                g = f;",
                            "                f = e;",
                            "                e = d.add(T1);",
                            "                d = c;",
                            "                c = b;",
                            "                b = a;",
                            "                a = T1.add(T2);",
                            "            }",
                            "",
                            "            \/\/ 4 - compute the new intermediate hash value",
                            "            H[0] = H[0].add(a);",
                            "            H[1] = H[1].add(b);",
                            "            H[2] = H[2].add(c);",
                            "            H[3] = H[3].add(d);",
                            "            H[4] = H[4].add(e);",
                            "            H[5] = H[5].add(f);",
                            "            H[6] = H[6].add(g);",
                            "            H[7] = H[7].add(h);",
                            "        }",
                            "",
                            "        \/\/ convert H0..H7 to hex strings (with leading zeros)",
                            "        for (let h=0; h<H.length; h++) H[h] = H[h].toString();",
                            "",
                            "        \/\/ concatenate H0..H7, with separator if required",
                            "        const separator = opt.outFormat=='hex-w' ? ' ' : '';",
                            "",
                            "        return H.join(separator);",
                            "",
                            "        \/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/",
                            "",
                            "        function utf8Encode(str) {",
                            "            try {",
                            "                return new TextEncoder().encode(str, 'utf-8').reduce((prev, curr) => prev + String.fromCharCode(curr), '');",
                            "            } catch (e) { \/\/ no TextEncoder available?",
                            "                return unescape(encodeURIComponent(str)); \/\/ monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html",
                            "            }",
                            "        }",
                            "",
                            "        function hexBytesToString(hexStr) { \/\/ convert string of hex numbers to a string of chars (eg '616263' -> 'abc').",
                            "            const str = hexStr.replace(' ', ''); \/\/ allow space-separated groups",
                            "            return str=='' ? '' : str.match(\/.{2}\/g).map(byte => String.fromCharCode(parseInt(byte, 16))).join('');",
                            "        }",
                            "    }",
                            "",
                            "",
                            "    \/**",
                            "     * Rotates right (circular right shift) value x by n positions [\u00a73.2.4].",
                            "     * @private",
                            "     *\/",
                            "    static ROTR(x, n) { \/\/ emulates (x >>> n) | (x << (64-n)",
                            "        if (n == 0) return x;",
                            "        if (n == 32) return new Sha512.Long(x.lo, x.hi);",
                            "",
                            "        let hi = x.hi, lo = x.lo;",
                            "",
                            "        if (n > 32) {",
                            "            [ lo, hi ] = [ hi, lo ]; \/\/ swap hi\/lo",
                            "            n -= 32;",
                            "        }",
                            "",
                            "        const hi1 = (hi >>> n) | (lo << (32-n));",
                            "        const lo1 = (lo >>> n) | (hi << (32-n));",
                            "",
                            "        return new Sha512.Long(hi1, lo1);",
                            "    }",
                            "",
                            "",
                            "    \/**",
                            "     * Logical functions [\u00a74.1.3].",
                            "     * @private",
                            "     *\/",
                            "    static S0(x) { return Sha512.ROTR(x, 28).xor(Sha512.ROTR(x, 34)).xor(Sha512.ROTR(x, 39)); }",
                            "    static S1(x) { return Sha512.ROTR(x, 14).xor(Sha512.ROTR(x, 18)).xor(Sha512.ROTR(x, 41)); }",
                            "    static s0(x) { return Sha512.ROTR(x,  1).xor(Sha512.ROTR(x,  8)).xor(x.shr(7)); }",
                            "    static s1(x) { return Sha512.ROTR(x, 19).xor(Sha512.ROTR(x, 61)).xor(x.shr(6)); }",
                            "    static Ch(x, y, z)  { return (x.and(y)).xor(x.not().and(z)); }         \/\/ 'choice'",
                            "    static Maj(x, y, z) { return (x.and(y)).xor(x.and(z)).xor(y.and(z)); } \/\/ 'majority'",
                            "",
                            "}",
                            "",
                            "\/**",
                            " * JavaScript has no support for 64-bit integers; this class provides methods required to support",
                            " * 64-bit unsigned integers within Sha256.",
                            " *",
                            " * All string manipulation is radix 16. Note n >>> 0 coerces n to unsigned 32-bit value.",
                            " *\/",
                            "Sha512.Long = class {",
                            "",
                            "    constructor(hi, lo) {",
                            "        this.hi = hi >>> 0;",
                            "        this.lo = lo >>> 0;",
                            "    }",
                            "",
                            "    static fromString(str) {",
                            "        const hi = parseInt(str.slice(0, -8), 16);",
                            "        const lo = parseInt(str.slice(-8), 16);",
                            "",
                            "        return new Sha512.Long(hi, lo);",
                            "    }",
                            "",
                            "    toString() {",
                            "        const hi = ('00000000'+this.hi.toString(16)).slice(-8);",
                            "        const lo = ('00000000'+this.lo.toString(16)).slice(-8);",
                            "",
                            "        return hi + lo;",
                            "    }",
                            "",
                            "    add(that) { \/\/ addition modulo 2^64",
                            "        const lo = this.lo + that.lo;",
                            "        const hi = this.hi + that.hi + (lo>0x100000000 ? 1 : 0); \/\/ carry top bit if lo > 2^32",
                            "",
                            "        return new Sha512.Long(hi >>> 0, lo >>> 0);",
                            "    }",
                            "",
                            "    and(that) { \/\/ &",
                            "        return new Sha512.Long(this.hi & that.hi, this.lo & that.lo);",
                            "    }",
                            "",
                            "    xor(that) { \/\/ ^",
                            "        return new Sha512.Long(this.hi ^ that.hi, this.lo ^ that.lo);",
                            "    }",
                            "",
                            "    not() {  \/\/ ~",
                            "        return new Sha512.Long(~this.hi, ~this.lo);",
                            "    }",
                            "",
                            "    shr(n) { \/\/ >>>",
                            "        if (n ==  0) return this;",
                            "        if (n == 32) return new Sha512.Long(0, this.hi);",
                            "        if (n >  32) return new Sha512.Long(0, this.hi >>> n-32);",
                            "        \/* n < 32 *\/ return new Sha512.Long(this.hi >>> n, this.lo >>> n | this.hi << (32-n));",
                            "    }",
                            "",
                            "};",
                            "",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var authdata =",
                            "    \"IWrhQ49\/8oe7Cs6TCSAHyz7V1KB9si63uAuY2H+SR1piYRLN3vHN8v\/RFXSmirM1wfGQevRUZADtvUNEtkS007QtD5lINQCcZrpB2jOyX7GBLPRkVuhKUVJEA4HLbllAkCflasT\/X4vP7jo+qokyYQW6I9VOqEfwvoLnduHpC1MqJuiruHMCflOYqtnw5ECDgUNYgoKUPbK4zrr8b663ZUJr8a4ENygOZOMOu7Ame7zo8UcnO7zxh6nI\/q4crlT2YnuE\/tFa\/HN9Yh76pU3kcXd0q70+bh6xNDeH1JOSyqVB\/OkbArsCHWjC1naxS6+PbEI5vf4gp\/AU0ZN61QKvEg==\";",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;",
                            "\/\/var signatureCipher = \"POST&https%3A%2F%2Fsandbox.interswitchng.com%2Fapi%2Fv3%2Fpurchases&1515061497&33861830&IKIA9614B82064D632E9B6418DF358A6A4AEA84D7218&XCTiBtLy1G9chAnyg0z3BcaFK4cVpwDg\/GTw2EmjTZ8=\";",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha512.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "e26a6e5a-8160-4bb5-b077-39f003466b4d",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);",
                            "postman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);"
                        ]
                    }
                }
            ],
            "folder": "01ba8ad3-76ce-46af-b8f6-491876c55ec7",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/**\n * SHA-512 hash function reference implementation.\n *\n * This is an annotated direct implementation of FIPS 180-4, without any optimisations. It is\n * intended to aid understanding of the algorithm rather than for production use.\n *\n * While it could be used where performance is not critical, I would recommend using the \u2018Web\n * Cryptography API\u2019 (developer.mozilla.org\/en-US\/docs\/Web\/API\/SubtleCrypto\/digest) for the browser,\n * or the \u2018crypto\u2019 library (nodejs.org\/api\/crypto.html#crypto_class_hash) in Node.js.\n *\n * SHA-512 is more difficult to implement in JavaScript than SHA-256, as it is based on 64-bit\n * (unsigned) integers, which are not natively supported in JavaScript (in which all numbers are\n * IEEE 754 64-bit floating-point numbers). A 'Long' library here provides UInt64-style support.\n *\n * See csrc.nist.gov\/groups\/ST\/toolkit\/secure_hashing.html\n *     csrc.nist.gov\/groups\/ST\/toolkit\/examples.html\n *\/\nclass Sha512 {\n\n    \/**\n     * Generates SHA-512 hash of string.\n     *\n     * @param   {string} msg - (Unicode) string to be hashed.\n     * @param   {Object} [options]\n     * @param   {string} [options.msgFormat=string] - Message format: 'string' for JavaScript string\n     *   (gets converted to UTF-8 for hashing); 'hex-bytes' for string of hex bytes ('616263' = 'abc') .\n     * @param   {string} [options.outFormat=hex] - Output format: 'hex' for string of contiguous\n     *   hex bytes; 'hex-w' for grouping hex bytes into groups of (8 byte \/ 16 character) words.\n     * @returns {string} Hash of msg as hex character string.\n     *\/\n    static hash(msg, options) {\n        const defaults = { msgFormat: 'string', outFormat: 'hex' };\n        const opt = Object.assign(defaults, options);\n\n        switch (opt.msgFormat) {\n            default: \/\/ default is to convert string to UTF-8, as SHA only deals with byte-streams\n            case 'string':   msg = utf8Encode(msg);       break;\n            case 'hex-bytes':msg = hexBytesToString(msg); break; \/\/ mostly for running tests\n        }\n\n        \/\/ constants [\u00a74.2.3]\n        const K = [\n            '428a2f98d728ae22', '7137449123ef65cd', 'b5c0fbcfec4d3b2f', 'e9b5dba58189dbbc',\n            '3956c25bf348b538', '59f111f1b605d019', '923f82a4af194f9b', 'ab1c5ed5da6d8118',\n            'd807aa98a3030242', '12835b0145706fbe', '243185be4ee4b28c', '550c7dc3d5ffb4e2',\n            '72be5d74f27b896f', '80deb1fe3b1696b1', '9bdc06a725c71235', 'c19bf174cf692694',\n            'e49b69c19ef14ad2', 'efbe4786384f25e3', '0fc19dc68b8cd5b5', '240ca1cc77ac9c65',\n            '2de92c6f592b0275', '4a7484aa6ea6e483', '5cb0a9dcbd41fbd4', '76f988da831153b5',\n            '983e5152ee66dfab', 'a831c66d2db43210', 'b00327c898fb213f', 'bf597fc7beef0ee4',\n            'c6e00bf33da88fc2', 'd5a79147930aa725', '06ca6351e003826f', '142929670a0e6e70',\n            '27b70a8546d22ffc', '2e1b21385c26c926', '4d2c6dfc5ac42aed', '53380d139d95b3df',\n            '650a73548baf63de', '766a0abb3c77b2a8', '81c2c92e47edaee6', '92722c851482353b',\n            'a2bfe8a14cf10364', 'a81a664bbc423001', 'c24b8b70d0f89791', 'c76c51a30654be30',\n            'd192e819d6ef5218', 'd69906245565a910', 'f40e35855771202a', '106aa07032bbd1b8',\n            '19a4c116b8d2d0c8', '1e376c085141ab53', '2748774cdf8eeb99', '34b0bcb5e19b48a8',\n            '391c0cb3c5c95a63', '4ed8aa4ae3418acb', '5b9cca4f7763e373', '682e6ff3d6b2b8a3',\n            '748f82ee5defb2fc', '78a5636f43172f60', '84c87814a1f0ab72', '8cc702081a6439ec',\n            '90befffa23631e28', 'a4506cebde82bde9', 'bef9a3f7b2c67915', 'c67178f2e372532b',\n            'ca273eceea26619c', 'd186b8c721c0c207', 'eada7dd6cde0eb1e', 'f57d4f7fee6ed178',\n            '06f067aa72176fba', '0a637dc5a2c898a6', '113f9804bef90dae', '1b710b35131c471b',\n            '28db77f523047d84', '32caab7b40c72493', '3c9ebe0a15c9bebc', '431d67c49c100d4c',\n            '4cc5d4becb3e42b6', '597f299cfc657e2a', '5fcb6fab3ad6faec', '6c44198c4a475817',\n        ].map(k => Sha512.Long.fromString(k));\n\n        \/\/ initial hash value [\u00a75.3.5]\n        const H = [\n            '6a09e667f3bcc908', 'bb67ae8584caa73b', '3c6ef372fe94f82b', 'a54ff53a5f1d36f1',\n            '510e527fade682d1', '9b05688c2b3e6c1f', '1f83d9abfb41bd6b', '5be0cd19137e2179',\n        ].map(h => Sha512.Long.fromString(h));\n\n        \/\/ PREPROCESSING [\u00a76.4.1]\n\n        msg += String.fromCharCode(0x80);  \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.2]\n\n        \/\/ convert string msg into 1024-bit blocks (array of 16 uint64) [\u00a75.2.2]\n        const l = msg.length\/8 + 2; \/\/ length (in 64-bit longs) of msg + \u20181\u2019 + appended length\n        const N = Math.ceil(l\/16);  \/\/ number of 16-long (1024-bit) blocks required to hold 'l' ints\n        const M = new Array(N);     \/\/ message M is N\u00d716 array of 64-bit integers\n\n        for (let i=0; i<N; i++) {\n            M[i] = new Array(16);\n            for (let j=0; j<16; j++) { \/\/ encode 8 chars per uint64 (128 per block), big-endian encoding\n                const lo = (msg.charCodeAt(i*128+j*8+0)<<24) | (msg.charCodeAt(i*128+j*8+1)<<16)\n                         | (msg.charCodeAt(i*128+j*8+2)<< 8) | (msg.charCodeAt(i*128+j*8+3)<< 0);\n                const hi = (msg.charCodeAt(i*128+j*8+4)<<24) | (msg.charCodeAt(i*128+j*8+5)<<16)\n                         | (msg.charCodeAt(i*128+j*8+6)<< 8) | (msg.charCodeAt(i*128+j*8+7)<< 0);\n                M[i][j] = new Sha512.Long(lo, hi);\n            } \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n        }\n        \/\/ add length (in bits) into final pair of 64-bit integers (big-endian) [\u00a75.1.2]\n        M[N-1][14] = new Sha512.Long(0, 0); \/\/ tooo hard... limit msg to 2 million terabytes\n        \/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n        \/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n        const lenHi = ((msg.length-1)*8) \/ Math.pow(2, 32);\n        const lenLo = ((msg.length-1)*8) >>> 0; \/\/ note '>>> 0' coerces number to unsigned 32-bit integer\n        M[N-1][15] = new Sha512.Long(Math.floor(lenHi), lenLo);\n\n\n        \/\/ HASH COMPUTATION [\u00a76.4.2]\n\n        for (let i=0; i<N; i++) {\n            const W = new Array(80);\n\n            \/\/ 1 - prepare message schedule 'W'\n            for (let t=0;  t<16; t++) W[t] = M[i][t];\n            for (let t=16; t<80; t++) {\n                W[t] = (Sha512.s1(W[t-2]).add(W[t-7]).add(Sha512.s0(W[t-15])).add(W[t-16]));\n            }\n\n            \/\/ 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n            let a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], f = H[5], g = H[6], h = H[7];\n\n            \/\/ 3 - main loop (note 'addition modulo 2^64')\n            for (let t=0; t<80; t++) {\n                const T1 = h.add(Sha512.S1(e)).add(Sha512.Ch(e, f, g)).add(K[t]).add(W[t]);\n                const T2 = Sha512.S0(a).add(Sha512.Maj(a, b, c));\n                h = g;\n                g = f;\n                f = e;\n                e = d.add(T1);\n                d = c;\n                c = b;\n                b = a;\n                a = T1.add(T2);\n            }\n\n            \/\/ 4 - compute the new intermediate hash value\n            H[0] = H[0].add(a);\n            H[1] = H[1].add(b);\n            H[2] = H[2].add(c);\n            H[3] = H[3].add(d);\n            H[4] = H[4].add(e);\n            H[5] = H[5].add(f);\n            H[6] = H[6].add(g);\n            H[7] = H[7].add(h);\n        }\n\n        \/\/ convert H0..H7 to hex strings (with leading zeros)\n        for (let h=0; h<H.length; h++) H[h] = H[h].toString();\n\n        \/\/ concatenate H0..H7, with separator if required\n        const separator = opt.outFormat=='hex-w' ? ' ' : '';\n\n        return H.join(separator);\n\n        \/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\n\n        function utf8Encode(str) {\n            try {\n                return new TextEncoder().encode(str, 'utf-8').reduce((prev, curr) => prev + String.fromCharCode(curr), '');\n            } catch (e) { \/\/ no TextEncoder available?\n                return unescape(encodeURIComponent(str)); \/\/ monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html\n            }\n        }\n\n        function hexBytesToString(hexStr) { \/\/ convert string of hex numbers to a string of chars (eg '616263' -> 'abc').\n            const str = hexStr.replace(' ', ''); \/\/ allow space-separated groups\n            return str=='' ? '' : str.match(\/.{2}\/g).map(byte => String.fromCharCode(parseInt(byte, 16))).join('');\n        }\n    }\n\n\n    \/**\n     * Rotates right (circular right shift) value x by n positions [\u00a73.2.4].\n     * @private\n     *\/\n    static ROTR(x, n) { \/\/ emulates (x >>> n) | (x << (64-n)\n        if (n == 0) return x;\n        if (n == 32) return new Sha512.Long(x.lo, x.hi);\n\n        let hi = x.hi, lo = x.lo;\n\n        if (n > 32) {\n            [ lo, hi ] = [ hi, lo ]; \/\/ swap hi\/lo\n            n -= 32;\n        }\n\n        const hi1 = (hi >>> n) | (lo << (32-n));\n        const lo1 = (lo >>> n) | (hi << (32-n));\n\n        return new Sha512.Long(hi1, lo1);\n    }\n\n\n    \/**\n     * Logical functions [\u00a74.1.3].\n     * @private\n     *\/\n    static S0(x) { return Sha512.ROTR(x, 28).xor(Sha512.ROTR(x, 34)).xor(Sha512.ROTR(x, 39)); }\n    static S1(x) { return Sha512.ROTR(x, 14).xor(Sha512.ROTR(x, 18)).xor(Sha512.ROTR(x, 41)); }\n    static s0(x) { return Sha512.ROTR(x,  1).xor(Sha512.ROTR(x,  8)).xor(x.shr(7)); }\n    static s1(x) { return Sha512.ROTR(x, 19).xor(Sha512.ROTR(x, 61)).xor(x.shr(6)); }\n    static Ch(x, y, z)  { return (x.and(y)).xor(x.not().and(z)); }         \/\/ 'choice'\n    static Maj(x, y, z) { return (x.and(y)).xor(x.and(z)).xor(y.and(z)); } \/\/ 'majority'\n\n}\n\n\/**\n * JavaScript has no support for 64-bit integers; this class provides methods required to support\n * 64-bit unsigned integers within Sha256.\n *\n * All string manipulation is radix 16. Note n >>> 0 coerces n to unsigned 32-bit value.\n *\/\nSha512.Long = class {\n\n    constructor(hi, lo) {\n        this.hi = hi >>> 0;\n        this.lo = lo >>> 0;\n    }\n\n    static fromString(str) {\n        const hi = parseInt(str.slice(0, -8), 16);\n        const lo = parseInt(str.slice(-8), 16);\n\n        return new Sha512.Long(hi, lo);\n    }\n\n    toString() {\n        const hi = ('00000000'+this.hi.toString(16)).slice(-8);\n        const lo = ('00000000'+this.lo.toString(16)).slice(-8);\n\n        return hi + lo;\n    }\n\n    add(that) { \/\/ addition modulo 2^64\n        const lo = this.lo + that.lo;\n        const hi = this.hi + that.hi + (lo>0x100000000 ? 1 : 0); \/\/ carry top bit if lo > 2^32\n\n        return new Sha512.Long(hi >>> 0, lo >>> 0);\n    }\n\n    and(that) { \/\/ &\n        return new Sha512.Long(this.hi & that.hi, this.lo & that.lo);\n    }\n\n    xor(that) { \/\/ ^\n        return new Sha512.Long(this.hi ^ that.hi, this.lo ^ that.lo);\n    }\n\n    not() {  \/\/ ~\n        return new Sha512.Long(~this.hi, ~this.lo);\n    }\n\n    shr(n) { \/\/ >>>\n        if (n ==  0) return this;\n        if (n == 32) return new Sha512.Long(0, this.hi);\n        if (n >  32) return new Sha512.Long(0, this.hi >>> n-32);\n        \/* n < 32 *\/ return new Sha512.Long(this.hi >>> n, this.lo >>> n | this.hi << (32-n));\n    }\n\n};\n\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\nvar authdata =\n    \"IWrhQ49\/8oe7Cs6TCSAHyz7V1KB9si63uAuY2H+SR1piYRLN3vHN8v\/RFXSmirM1wfGQevRUZADtvUNEtkS007QtD5lINQCcZrpB2jOyX7GBLPRkVuhKUVJEA4HLbllAkCflasT\/X4vP7jo+qokyYQW6I9VOqEfwvoLnduHpC1MqJuiruHMCflOYqtnw5ECDgUNYgoKUPbK4zrr8b663ZUJr8a4ENygOZOMOu7Ame7zo8UcnO7zxh6nI\/q4crlT2YnuE\/tFa\/HN9Yh76pU3kcXd0q70+bh6xNDeH1JOSyqVB\/OkbArsCHWjC1naxS6+PbEI5vf4gp\/AU0ZN61QKvEg==\";\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;\n\/\/var signatureCipher = \"POST&https%3A%2F%2Fsandbox.interswitchng.com%2Fapi%2Fv3%2Fpurchases&1515061497&33861830&IKIA9614B82064D632E9B6418DF358A6A4AEA84D7218&XCTiBtLy1G9chAnyg0z3BcaFK4cVpwDg\/GTw2EmjTZ8=\";\npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha512.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);\npostman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n    \"customerId\": \"JOnJazzy@gmail.com\",\r\n    \"amount\": \"666.66\",\r\n    \"authData\":\r\n    \"IWrhQ49\/8oe7Cs6TCSAHyz7V1KB9si63uAuY2H+SR1piYRLN3vHN8v\/RFXSmirM1wfGQevRUZADtvUNEtkS007QtD5lINQCcZrpB2jOyX7GBLPRkVuhKUVJEA4HLbllAkCflasT\/X4vP7jo+qokyYQW6I9VOqEfwvoLnduHpC1MqJuiruHMCflOYqtnw5ECDgUNYgoKUPbK4zrr8b663ZUJr8a4ENygOZOMOu7Ame7zo8UcnO7zxh6nI\/q4crlT2YnuE\/tFa\/HN9Yh76pU3kcXd0q70+bh6xNDeH1JOSyqVB\/OkbArsCHWjC1naxS6+PbEI5vf4gp\/AU0ZN61QKvEg==\",\r\n    \"currency\": \"NGN\",\r\n    \"transactionRef\": \"JB-{{Timestamp}}-NoOTP\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: SHA512\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "1b71950f-171c-4d11-8848-a5b1cd29bed5",
            "name": "Get Transaction Status - System Malfunction",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": null,
            "data": null,
            "dataMode": null,
            "headerData": [
                {
                    "key": "Amount",
                    "value": "1759.77",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "transactionRef",
                    "value": "TXNID689223499",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "-----------------------------------------------------------------------------------------------",
                    "value": "---------------------------------------------------------------------------------------",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "GET",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "5f3fa295-129b-4aae-b836-8e1e037da632",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                }
            ],
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": null,
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Amount: 1759.77\ntransactionRef: TXNID689223499\n-----------------------------------------------------------------------------------------------: ---------------------------------------------------------------------------------------\nContent-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "1ce8e145-5bdb-4a23-9ab2-65712fdf7586",
            "name": "Passport Request",
            "url": "https:\/\/sandbox.interswitchng.com\/passport\/oauth\/token",
            "description": null,
            "data": [
                {
                    "key": "grant_type",
                    "value": "client_credentials",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Authorization}}",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "\/\/Calculate Authorisation",
                            "var authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);",
                            "",
                            "\/\/Set Environment Variable",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);"
                        ]
                    }
                }
            ],
            "folder": "523678fc-9b3e-4567-b4c3-98e4c5c5df73",
            "preRequestScript": "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\/\/Calculate Authorisation\nvar authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);\n\n\/\/Set Environment Variable\npostman.setEnvironmentVariable(\"Authorization\", authorization);\n",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\nAuthorization: {{Authorization}}\n",
            "pathVariables": []
        },
        {
            "id": "24e043be-bb4e-4d60-b5a6-c77edbc4ade3",
            "name": "Passport Request",
            "url": "https:\/\/sandbox.interswitchng.com\/passport\/oauth\/token",
            "description": "",
            "data": [
                {
                    "key": "grant_type",
                    "value": "client_credentials",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Authorization}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "\/\/Calculate Authorisation",
                            "var authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);",
                            "",
                            "\/\/Set Environment Variable",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);"
                        ]
                    }
                }
            ],
            "folder": "6125dfee-e7f3-40c8-a9cd-569d9da26683",
            "preRequestScript": "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\/\/Calculate Authorisation\nvar authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);\n\n\/\/Set Environment Variable\npostman.setEnvironmentVariable(\"Authorization\", authorization);\n",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\nAuthorization: {{Authorization}}\n",
            "pathVariables": []
        },
        {
            "id": "3860691d-5737-4991-afb4-fdd1d691b275",
            "name": "OTP Validation Request",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases\/otps\/auths",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "c3cad502-d84c-4ce1-9d1e-623b5d75c331",
                        "type": "text\/javascript",
                        "exec": [
                            "\/\/Enter OTP here",
                            "var otp = \"760437\";",
                            "",
                            "var authdata = \"QQaOpQg9fqq0p8Q6IpZHdWSNacfkGnU04Woq7AMhvZG5Ev+VbQAKYHIv95IM9tG1uUwRYA4eWz9WJ8CbMntoegW7nunrnWei2dgeQ50CfM5kefk4IRcK7yyCaM7kz0ifNorRFFF3et4C+saZ3Hm7XzyxivAOAIfZsmNdbRYPSOYm66+9tJix8mRpC0DCRg6Bn7pSx\/Gy3ewiataMTCX+0X9b3j0SiYNVUhP+BfpXZEX3XcqpThT4HJDTKaeBlFIrG4N53mw+eaHj2\/cg6VxWoMnv4HpAKYnG1Pyi+lnBCmtwJEmEd0r8+v4yLOAvm8rR2cM+jGtBRwsSjwmJ4Nj3FQ==\";",
                            "",
                            "",
                            "",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "",
                            "",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + otp + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "da2fb0bd-c741-4d15-85af-d9638faa8930",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"token\", jsonData.token);",
                            "postman.setEnvironmentVariable(\"tokenExpiryDate\", jsonData.tokenExpiryDate);"
                        ]
                    }
                }
            ],
            "folder": "15bf76e0-e11a-45b3-b8b0-80bb764dec85",
            "preRequestScript": "\/\/Enter OTP here\nvar otp = \"760437\";\n\nvar authdata = \"QQaOpQg9fqq0p8Q6IpZHdWSNacfkGnU04Woq7AMhvZG5Ev+VbQAKYHIv95IM9tG1uUwRYA4eWz9WJ8CbMntoegW7nunrnWei2dgeQ50CfM5kefk4IRcK7yyCaM7kz0ifNorRFFF3et4C+saZ3Hm7XzyxivAOAIfZsmNdbRYPSOYm66+9tJix8mRpC0DCRg6Bn7pSx\/Gy3ewiataMTCX+0X9b3j0SiYNVUhP+BfpXZEX3XcqpThT4HJDTKaeBlFIrG4N53mw+eaHj2\/cg6VxWoMnv4HpAKYnG1Pyi+lnBCmtwJEmEd0r8+v4yLOAvm8rR2cM+jGtBRwsSjwmJ4Nj3FQ==\";\n\n\n\n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\n\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\n\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + otp + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"token\", jsonData.token);\npostman.setEnvironmentVariable(\"tokenExpiryDate\", jsonData.tokenExpiryDate);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n  \"paymentId\":\"{{paymentId}}\",\r\n  \"authData\":\r\n  \"QQaOpQg9fqq0p8Q6IpZHdWSNacfkGnU04Woq7AMhvZG5Ev+VbQAKYHIv95IM9tG1uUwRYA4eWz9WJ8CbMntoegW7nunrnWei2dgeQ50CfM5kefk4IRcK7yyCaM7kz0ifNorRFFF3et4C+saZ3Hm7XzyxivAOAIfZsmNdbRYPSOYm66+9tJix8mRpC0DCRg6Bn7pSx\/Gy3ewiataMTCX+0X9b3j0SiYNVUhP+BfpXZEX3XcqpThT4HJDTKaeBlFIrG4N53mw+eaHj2\/cg6VxWoMnv4HpAKYnG1Pyi+lnBCmtwJEmEd0r8+v4yLOAvm8rR2cM+jGtBRwsSjwmJ4Nj3FQ==\",\r\n  \"otp\":\"760437\"               \r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "3d229c91-5d8c-4b19-8ccf-34a63346cadc",
            "name": "Passport Request",
            "url": "https:\/\/sandbox.interswitchng.com\/passport\/oauth\/token",
            "description": "",
            "data": [
                {
                    "key": "grant_type",
                    "value": "client_credentials",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Authorization}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "\/\/Calculate Authorisation",
                            "var authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);",
                            "",
                            "\/\/Set Environment Variable",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);"
                        ]
                    }
                }
            ],
            "folder": "9f3f9f1a-3366-4628-9282-3c8731dce6d0",
            "preRequestScript": "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\/\/Calculate Authorisation\nvar authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);\n\n\/\/Set Environment Variable\npostman.setEnvironmentVariable(\"Authorization\", authorization);\n",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\nAuthorization: {{Authorization}}\n",
            "pathVariables": []
        },
        {
            "id": "3dc64faa-2351-4a00-a87b-cab9f5d959e9",
            "name": "Get Transaction Status - Success",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": null,
            "data": null,
            "dataMode": null,
            "headerData": [
                {
                    "key": "Amount",
                    "value": "666.66",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "transactionRef",
                    "value": "JB-1517239112-NoOTP",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "GET",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "d2424262-577b-4b77-ba7a-8fd03aeb46aa",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var transactionRef = \"JB-1517239112-NoOTP\";",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                }
            ],
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\nvar transactionRef = \"JB-1517239112-NoOTP\";\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": null,
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Amount: 666.66\ntransactionRef: JB-1517239112-NoOTP\nContent-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "486249e7-5016-4b80-9d77-50872411647b",
            "name": "OTP Validation Request",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases\/otps\/auths",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "f5b2fe38-ce6e-4ca1-88a3-5594be771906",
                        "type": "text\/javascript",
                        "exec": [
                            "var otp = \"093455\";",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "",
                            "",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var authdata = postman.getEnvironmentVariable(\"authdata\");",
                            "",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + otp + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "da2fb0bd-c741-4d15-85af-d9638faa8930",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"token\", jsonData.token);",
                            "postman.setEnvironmentVariable(\"tokenExpiryDate\", jsonData.tokenExpiryDate);"
                        ]
                    }
                }
            ],
            "folder": "d1cdc035-c0f6-488d-8305-d0c9d206971f",
            "preRequestScript": "var otp = \"093455\";\n\n\n\n\n\n\n\n\n\n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\n\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\nvar authdata = postman.getEnvironmentVariable(\"authdata\");\n\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + otp + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"token\", jsonData.token);\npostman.setEnvironmentVariable(\"tokenExpiryDate\", jsonData.tokenExpiryDate);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n  \"paymentId\":\"{{paymentId}}\",\r\n  \"authData\":  \"{{authdata}}\",\r\n  \"otp\":\"093455\"               \r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "48902708-099c-4b1e-963d-b44bd75cffb3",
            "name": "Purchase With Card",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": null,
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "SHA512",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "fc3b917f-9156-42c6-9a88-3766f3734319",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/**",
                            " * SHA-512 hash function reference implementation.",
                            " *",
                            " * This is an annotated direct implementation of FIPS 180-4, without any optimisations. It is",
                            " * intended to aid understanding of the algorithm rather than for production use.",
                            " *",
                            " * While it could be used where performance is not critical, I would recommend using the \u2018Web",
                            " * Cryptography API\u2019 (developer.mozilla.org\/en-US\/docs\/Web\/API\/SubtleCrypto\/digest) for the browser,",
                            " * or the \u2018crypto\u2019 library (nodejs.org\/api\/crypto.html#crypto_class_hash) in Node.js.",
                            " *",
                            " * SHA-512 is more difficult to implement in JavaScript than SHA-256, as it is based on 64-bit",
                            " * (unsigned) integers, which are not natively supported in JavaScript (in which all numbers are",
                            " * IEEE 754 64-bit floating-point numbers). A 'Long' library here provides UInt64-style support.",
                            " *",
                            " * See csrc.nist.gov\/groups\/ST\/toolkit\/secure_hashing.html",
                            " *     csrc.nist.gov\/groups\/ST\/toolkit\/examples.html",
                            " *\/",
                            "class Sha512 {",
                            "",
                            "    \/**",
                            "     * Generates SHA-512 hash of string.",
                            "     *",
                            "     * @param   {string} msg - (Unicode) string to be hashed.",
                            "     * @param   {Object} [options]",
                            "     * @param   {string} [options.msgFormat=string] - Message format: 'string' for JavaScript string",
                            "     *   (gets converted to UTF-8 for hashing); 'hex-bytes' for string of hex bytes ('616263' = 'abc') .",
                            "     * @param   {string} [options.outFormat=hex] - Output format: 'hex' for string of contiguous",
                            "     *   hex bytes; 'hex-w' for grouping hex bytes into groups of (8 byte \/ 16 character) words.",
                            "     * @returns {string} Hash of msg as hex character string.",
                            "     *\/",
                            "    static hash(msg, options) {",
                            "        const defaults = { msgFormat: 'string', outFormat: 'hex' };",
                            "        const opt = Object.assign(defaults, options);",
                            "",
                            "        switch (opt.msgFormat) {",
                            "            default: \/\/ default is to convert string to UTF-8, as SHA only deals with byte-streams",
                            "            case 'string':   msg = utf8Encode(msg);       break;",
                            "            case 'hex-bytes':msg = hexBytesToString(msg); break; \/\/ mostly for running tests",
                            "        }",
                            "",
                            "        \/\/ constants [\u00a74.2.3]",
                            "        const K = [",
                            "            '428a2f98d728ae22', '7137449123ef65cd', 'b5c0fbcfec4d3b2f', 'e9b5dba58189dbbc',",
                            "            '3956c25bf348b538', '59f111f1b605d019', '923f82a4af194f9b', 'ab1c5ed5da6d8118',",
                            "            'd807aa98a3030242', '12835b0145706fbe', '243185be4ee4b28c', '550c7dc3d5ffb4e2',",
                            "            '72be5d74f27b896f', '80deb1fe3b1696b1', '9bdc06a725c71235', 'c19bf174cf692694',",
                            "            'e49b69c19ef14ad2', 'efbe4786384f25e3', '0fc19dc68b8cd5b5', '240ca1cc77ac9c65',",
                            "            '2de92c6f592b0275', '4a7484aa6ea6e483', '5cb0a9dcbd41fbd4', '76f988da831153b5',",
                            "            '983e5152ee66dfab', 'a831c66d2db43210', 'b00327c898fb213f', 'bf597fc7beef0ee4',",
                            "            'c6e00bf33da88fc2', 'd5a79147930aa725', '06ca6351e003826f', '142929670a0e6e70',",
                            "            '27b70a8546d22ffc', '2e1b21385c26c926', '4d2c6dfc5ac42aed', '53380d139d95b3df',",
                            "            '650a73548baf63de', '766a0abb3c77b2a8', '81c2c92e47edaee6', '92722c851482353b',",
                            "            'a2bfe8a14cf10364', 'a81a664bbc423001', 'c24b8b70d0f89791', 'c76c51a30654be30',",
                            "            'd192e819d6ef5218', 'd69906245565a910', 'f40e35855771202a', '106aa07032bbd1b8',",
                            "            '19a4c116b8d2d0c8', '1e376c085141ab53', '2748774cdf8eeb99', '34b0bcb5e19b48a8',",
                            "            '391c0cb3c5c95a63', '4ed8aa4ae3418acb', '5b9cca4f7763e373', '682e6ff3d6b2b8a3',",
                            "            '748f82ee5defb2fc', '78a5636f43172f60', '84c87814a1f0ab72', '8cc702081a6439ec',",
                            "            '90befffa23631e28', 'a4506cebde82bde9', 'bef9a3f7b2c67915', 'c67178f2e372532b',",
                            "            'ca273eceea26619c', 'd186b8c721c0c207', 'eada7dd6cde0eb1e', 'f57d4f7fee6ed178',",
                            "            '06f067aa72176fba', '0a637dc5a2c898a6', '113f9804bef90dae', '1b710b35131c471b',",
                            "            '28db77f523047d84', '32caab7b40c72493', '3c9ebe0a15c9bebc', '431d67c49c100d4c',",
                            "            '4cc5d4becb3e42b6', '597f299cfc657e2a', '5fcb6fab3ad6faec', '6c44198c4a475817',",
                            "        ].map(k => Sha512.Long.fromString(k));",
                            "",
                            "        \/\/ initial hash value [\u00a75.3.5]",
                            "        const H = [",
                            "            '6a09e667f3bcc908', 'bb67ae8584caa73b', '3c6ef372fe94f82b', 'a54ff53a5f1d36f1',",
                            "            '510e527fade682d1', '9b05688c2b3e6c1f', '1f83d9abfb41bd6b', '5be0cd19137e2179',",
                            "        ].map(h => Sha512.Long.fromString(h));",
                            "",
                            "        \/\/ PREPROCESSING [\u00a76.4.1]",
                            "",
                            "        msg += String.fromCharCode(0x80);  \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.2]",
                            "",
                            "        \/\/ convert string msg into 1024-bit blocks (array of 16 uint64) [\u00a75.2.2]",
                            "        const l = msg.length\/8 + 2; \/\/ length (in 64-bit longs) of msg + \u20181\u2019 + appended length",
                            "        const N = Math.ceil(l\/16);  \/\/ number of 16-long (1024-bit) blocks required to hold 'l' ints",
                            "        const M = new Array(N);     \/\/ message M is N\u00d716 array of 64-bit integers",
                            "",
                            "        for (let i=0; i<N; i++) {",
                            "            M[i] = new Array(16);",
                            "            for (let j=0; j<16; j++) { \/\/ encode 8 chars per uint64 (128 per block), big-endian encoding",
                            "                const lo = (msg.charCodeAt(i*128+j*8+0)<<24) | (msg.charCodeAt(i*128+j*8+1)<<16)",
                            "                         | (msg.charCodeAt(i*128+j*8+2)<< 8) | (msg.charCodeAt(i*128+j*8+3)<< 0);",
                            "                const hi = (msg.charCodeAt(i*128+j*8+4)<<24) | (msg.charCodeAt(i*128+j*8+5)<<16)",
                            "                         | (msg.charCodeAt(i*128+j*8+6)<< 8) | (msg.charCodeAt(i*128+j*8+7)<< 0);",
                            "                M[i][j] = new Sha512.Long(lo, hi);",
                            "            } \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "        }",
                            "        \/\/ add length (in bits) into final pair of 64-bit integers (big-endian) [\u00a75.1.2]",
                            "        M[N-1][14] = new Sha512.Long(0, 0); \/\/ tooo hard... limit msg to 2 million terabytes",
                            "        \/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "        \/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "        const lenHi = ((msg.length-1)*8) \/ Math.pow(2, 32);",
                            "        const lenLo = ((msg.length-1)*8) >>> 0; \/\/ note '>>> 0' coerces number to unsigned 32-bit integer",
                            "        M[N-1][15] = new Sha512.Long(Math.floor(lenHi), lenLo);",
                            "",
                            "",
                            "        \/\/ HASH COMPUTATION [\u00a76.4.2]",
                            "",
                            "        for (let i=0; i<N; i++) {",
                            "            const W = new Array(80);",
                            "",
                            "            \/\/ 1 - prepare message schedule 'W'",
                            "            for (let t=0;  t<16; t++) W[t] = M[i][t];",
                            "            for (let t=16; t<80; t++) {",
                            "                W[t] = (Sha512.s1(W[t-2]).add(W[t-7]).add(Sha512.s0(W[t-15])).add(W[t-16]));",
                            "            }",
                            "",
                            "            \/\/ 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value",
                            "            let a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], f = H[5], g = H[6], h = H[7];",
                            "",
                            "            \/\/ 3 - main loop (note 'addition modulo 2^64')",
                            "            for (let t=0; t<80; t++) {",
                            "                const T1 = h.add(Sha512.S1(e)).add(Sha512.Ch(e, f, g)).add(K[t]).add(W[t]);",
                            "                const T2 = Sha512.S0(a).add(Sha512.Maj(a, b, c));",
                            "                h = g;",
                            "                g = f;",
                            "                f = e;",
                            "                e = d.add(T1);",
                            "                d = c;",
                            "                c = b;",
                            "                b = a;",
                            "                a = T1.add(T2);",
                            "            }",
                            "",
                            "            \/\/ 4 - compute the new intermediate hash value",
                            "            H[0] = H[0].add(a);",
                            "            H[1] = H[1].add(b);",
                            "            H[2] = H[2].add(c);",
                            "            H[3] = H[3].add(d);",
                            "            H[4] = H[4].add(e);",
                            "            H[5] = H[5].add(f);",
                            "            H[6] = H[6].add(g);",
                            "            H[7] = H[7].add(h);",
                            "        }",
                            "",
                            "        \/\/ convert H0..H7 to hex strings (with leading zeros)",
                            "        for (let h=0; h<H.length; h++) H[h] = H[h].toString();",
                            "",
                            "        \/\/ concatenate H0..H7, with separator if required",
                            "        const separator = opt.outFormat=='hex-w' ? ' ' : '';",
                            "",
                            "        return H.join(separator);",
                            "",
                            "        \/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/",
                            "",
                            "        function utf8Encode(str) {",
                            "            try {",
                            "                return new TextEncoder().encode(str, 'utf-8').reduce((prev, curr) => prev + String.fromCharCode(curr), '');",
                            "            } catch (e) { \/\/ no TextEncoder available?",
                            "                return unescape(encodeURIComponent(str)); \/\/ monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html",
                            "            }",
                            "        }",
                            "",
                            "        function hexBytesToString(hexStr) { \/\/ convert string of hex numbers to a string of chars (eg '616263' -> 'abc').",
                            "            const str = hexStr.replace(' ', ''); \/\/ allow space-separated groups",
                            "            return str=='' ? '' : str.match(\/.{2}\/g).map(byte => String.fromCharCode(parseInt(byte, 16))).join('');",
                            "        }",
                            "    }",
                            "",
                            "",
                            "    \/**",
                            "     * Rotates right (circular right shift) value x by n positions [\u00a73.2.4].",
                            "     * @private",
                            "     *\/",
                            "    static ROTR(x, n) { \/\/ emulates (x >>> n) | (x << (64-n)",
                            "        if (n == 0) return x;",
                            "        if (n == 32) return new Sha512.Long(x.lo, x.hi);",
                            "",
                            "        let hi = x.hi, lo = x.lo;",
                            "",
                            "        if (n > 32) {",
                            "            [ lo, hi ] = [ hi, lo ]; \/\/ swap hi\/lo",
                            "            n -= 32;",
                            "        }",
                            "",
                            "        const hi1 = (hi >>> n) | (lo << (32-n));",
                            "        const lo1 = (lo >>> n) | (hi << (32-n));",
                            "",
                            "        return new Sha512.Long(hi1, lo1);",
                            "    }",
                            "",
                            "",
                            "    \/**",
                            "     * Logical functions [\u00a74.1.3].",
                            "     * @private",
                            "     *\/",
                            "    static S0(x) { return Sha512.ROTR(x, 28).xor(Sha512.ROTR(x, 34)).xor(Sha512.ROTR(x, 39)); }",
                            "    static S1(x) { return Sha512.ROTR(x, 14).xor(Sha512.ROTR(x, 18)).xor(Sha512.ROTR(x, 41)); }",
                            "    static s0(x) { return Sha512.ROTR(x,  1).xor(Sha512.ROTR(x,  8)).xor(x.shr(7)); }",
                            "    static s1(x) { return Sha512.ROTR(x, 19).xor(Sha512.ROTR(x, 61)).xor(x.shr(6)); }",
                            "    static Ch(x, y, z)  { return (x.and(y)).xor(x.not().and(z)); }         \/\/ 'choice'",
                            "    static Maj(x, y, z) { return (x.and(y)).xor(x.and(z)).xor(y.and(z)); } \/\/ 'majority'",
                            "",
                            "}",
                            "",
                            "\/**",
                            " * JavaScript has no support for 64-bit integers; this class provides methods required to support",
                            " * 64-bit unsigned integers within Sha256.",
                            " *",
                            " * All string manipulation is radix 16. Note n >>> 0 coerces n to unsigned 32-bit value.",
                            " *\/",
                            "Sha512.Long = class {",
                            "",
                            "    constructor(hi, lo) {",
                            "        this.hi = hi >>> 0;",
                            "        this.lo = lo >>> 0;",
                            "    }",
                            "",
                            "    static fromString(str) {",
                            "        const hi = parseInt(str.slice(0, -8), 16);",
                            "        const lo = parseInt(str.slice(-8), 16);",
                            "",
                            "        return new Sha512.Long(hi, lo);",
                            "    }",
                            "",
                            "    toString() {",
                            "        const hi = ('00000000'+this.hi.toString(16)).slice(-8);",
                            "        const lo = ('00000000'+this.lo.toString(16)).slice(-8);",
                            "",
                            "        return hi + lo;",
                            "    }",
                            "",
                            "    add(that) { \/\/ addition modulo 2^64",
                            "        const lo = this.lo + that.lo;",
                            "        const hi = this.hi + that.hi + (lo>0x100000000 ? 1 : 0); \/\/ carry top bit if lo > 2^32",
                            "",
                            "        return new Sha512.Long(hi >>> 0, lo >>> 0);",
                            "    }",
                            "",
                            "    and(that) { \/\/ &",
                            "        return new Sha512.Long(this.hi & that.hi, this.lo & that.lo);",
                            "    }",
                            "",
                            "    xor(that) { \/\/ ^",
                            "        return new Sha512.Long(this.hi ^ that.hi, this.lo ^ that.lo);",
                            "    }",
                            "",
                            "    not() {  \/\/ ~",
                            "        return new Sha512.Long(~this.hi, ~this.lo);",
                            "    }",
                            "",
                            "    shr(n) { \/\/ >>>",
                            "        if (n ==  0) return this;",
                            "        if (n == 32) return new Sha512.Long(0, this.hi);",
                            "        if (n >  32) return new Sha512.Long(0, this.hi >>> n-32);",
                            "        \/* n < 32 *\/ return new Sha512.Long(this.hi >>> n, this.lo >>> n | this.hi << (32-n));",
                            "    }",
                            "",
                            "};",
                            "",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var authdata = postman.getEnvironmentVariable(\"authdata\");",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;",
                            "\/\/var signatureCipher = \"POST&https%3A%2F%2Fsandbox.interswitchng.com%2Fapi%2Fv3%2Fpurchases&1515061497&33861830&IKIA9614B82064D632E9B6418DF358A6A4AEA84D7218&XCTiBtLy1G9chAnyg0z3BcaFK4cVpwDg\/GTw2EmjTZ8=\";",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha512.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "f35c1df9-22b5-4345-8f7f-64797f3d58a1",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);",
                            "postman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);"
                        ]
                    }
                }
            ],
            "folder": "d1cdc035-c0f6-488d-8305-d0c9d206971f",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/**\n * SHA-512 hash function reference implementation.\n *\n * This is an annotated direct implementation of FIPS 180-4, without any optimisations. It is\n * intended to aid understanding of the algorithm rather than for production use.\n *\n * While it could be used where performance is not critical, I would recommend using the \u2018Web\n * Cryptography API\u2019 (developer.mozilla.org\/en-US\/docs\/Web\/API\/SubtleCrypto\/digest) for the browser,\n * or the \u2018crypto\u2019 library (nodejs.org\/api\/crypto.html#crypto_class_hash) in Node.js.\n *\n * SHA-512 is more difficult to implement in JavaScript than SHA-256, as it is based on 64-bit\n * (unsigned) integers, which are not natively supported in JavaScript (in which all numbers are\n * IEEE 754 64-bit floating-point numbers). A 'Long' library here provides UInt64-style support.\n *\n * See csrc.nist.gov\/groups\/ST\/toolkit\/secure_hashing.html\n *     csrc.nist.gov\/groups\/ST\/toolkit\/examples.html\n *\/\nclass Sha512 {\n\n    \/**\n     * Generates SHA-512 hash of string.\n     *\n     * @param   {string} msg - (Unicode) string to be hashed.\n     * @param   {Object} [options]\n     * @param   {string} [options.msgFormat=string] - Message format: 'string' for JavaScript string\n     *   (gets converted to UTF-8 for hashing); 'hex-bytes' for string of hex bytes ('616263' = 'abc') .\n     * @param   {string} [options.outFormat=hex] - Output format: 'hex' for string of contiguous\n     *   hex bytes; 'hex-w' for grouping hex bytes into groups of (8 byte \/ 16 character) words.\n     * @returns {string} Hash of msg as hex character string.\n     *\/\n    static hash(msg, options) {\n        const defaults = { msgFormat: 'string', outFormat: 'hex' };\n        const opt = Object.assign(defaults, options);\n\n        switch (opt.msgFormat) {\n            default: \/\/ default is to convert string to UTF-8, as SHA only deals with byte-streams\n            case 'string':   msg = utf8Encode(msg);       break;\n            case 'hex-bytes':msg = hexBytesToString(msg); break; \/\/ mostly for running tests\n        }\n\n        \/\/ constants [\u00a74.2.3]\n        const K = [\n            '428a2f98d728ae22', '7137449123ef65cd', 'b5c0fbcfec4d3b2f', 'e9b5dba58189dbbc',\n            '3956c25bf348b538', '59f111f1b605d019', '923f82a4af194f9b', 'ab1c5ed5da6d8118',\n            'd807aa98a3030242', '12835b0145706fbe', '243185be4ee4b28c', '550c7dc3d5ffb4e2',\n            '72be5d74f27b896f', '80deb1fe3b1696b1', '9bdc06a725c71235', 'c19bf174cf692694',\n            'e49b69c19ef14ad2', 'efbe4786384f25e3', '0fc19dc68b8cd5b5', '240ca1cc77ac9c65',\n            '2de92c6f592b0275', '4a7484aa6ea6e483', '5cb0a9dcbd41fbd4', '76f988da831153b5',\n            '983e5152ee66dfab', 'a831c66d2db43210', 'b00327c898fb213f', 'bf597fc7beef0ee4',\n            'c6e00bf33da88fc2', 'd5a79147930aa725', '06ca6351e003826f', '142929670a0e6e70',\n            '27b70a8546d22ffc', '2e1b21385c26c926', '4d2c6dfc5ac42aed', '53380d139d95b3df',\n            '650a73548baf63de', '766a0abb3c77b2a8', '81c2c92e47edaee6', '92722c851482353b',\n            'a2bfe8a14cf10364', 'a81a664bbc423001', 'c24b8b70d0f89791', 'c76c51a30654be30',\n            'd192e819d6ef5218', 'd69906245565a910', 'f40e35855771202a', '106aa07032bbd1b8',\n            '19a4c116b8d2d0c8', '1e376c085141ab53', '2748774cdf8eeb99', '34b0bcb5e19b48a8',\n            '391c0cb3c5c95a63', '4ed8aa4ae3418acb', '5b9cca4f7763e373', '682e6ff3d6b2b8a3',\n            '748f82ee5defb2fc', '78a5636f43172f60', '84c87814a1f0ab72', '8cc702081a6439ec',\n            '90befffa23631e28', 'a4506cebde82bde9', 'bef9a3f7b2c67915', 'c67178f2e372532b',\n            'ca273eceea26619c', 'd186b8c721c0c207', 'eada7dd6cde0eb1e', 'f57d4f7fee6ed178',\n            '06f067aa72176fba', '0a637dc5a2c898a6', '113f9804bef90dae', '1b710b35131c471b',\n            '28db77f523047d84', '32caab7b40c72493', '3c9ebe0a15c9bebc', '431d67c49c100d4c',\n            '4cc5d4becb3e42b6', '597f299cfc657e2a', '5fcb6fab3ad6faec', '6c44198c4a475817',\n        ].map(k => Sha512.Long.fromString(k));\n\n        \/\/ initial hash value [\u00a75.3.5]\n        const H = [\n            '6a09e667f3bcc908', 'bb67ae8584caa73b', '3c6ef372fe94f82b', 'a54ff53a5f1d36f1',\n            '510e527fade682d1', '9b05688c2b3e6c1f', '1f83d9abfb41bd6b', '5be0cd19137e2179',\n        ].map(h => Sha512.Long.fromString(h));\n\n        \/\/ PREPROCESSING [\u00a76.4.1]\n\n        msg += String.fromCharCode(0x80);  \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.2]\n\n        \/\/ convert string msg into 1024-bit blocks (array of 16 uint64) [\u00a75.2.2]\n        const l = msg.length\/8 + 2; \/\/ length (in 64-bit longs) of msg + \u20181\u2019 + appended length\n        const N = Math.ceil(l\/16);  \/\/ number of 16-long (1024-bit) blocks required to hold 'l' ints\n        const M = new Array(N);     \/\/ message M is N\u00d716 array of 64-bit integers\n\n        for (let i=0; i<N; i++) {\n            M[i] = new Array(16);\n            for (let j=0; j<16; j++) { \/\/ encode 8 chars per uint64 (128 per block), big-endian encoding\n                const lo = (msg.charCodeAt(i*128+j*8+0)<<24) | (msg.charCodeAt(i*128+j*8+1)<<16)\n                         | (msg.charCodeAt(i*128+j*8+2)<< 8) | (msg.charCodeAt(i*128+j*8+3)<< 0);\n                const hi = (msg.charCodeAt(i*128+j*8+4)<<24) | (msg.charCodeAt(i*128+j*8+5)<<16)\n                         | (msg.charCodeAt(i*128+j*8+6)<< 8) | (msg.charCodeAt(i*128+j*8+7)<< 0);\n                M[i][j] = new Sha512.Long(lo, hi);\n            } \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n        }\n        \/\/ add length (in bits) into final pair of 64-bit integers (big-endian) [\u00a75.1.2]\n        M[N-1][14] = new Sha512.Long(0, 0); \/\/ tooo hard... limit msg to 2 million terabytes\n        \/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n        \/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n        const lenHi = ((msg.length-1)*8) \/ Math.pow(2, 32);\n        const lenLo = ((msg.length-1)*8) >>> 0; \/\/ note '>>> 0' coerces number to unsigned 32-bit integer\n        M[N-1][15] = new Sha512.Long(Math.floor(lenHi), lenLo);\n\n\n        \/\/ HASH COMPUTATION [\u00a76.4.2]\n\n        for (let i=0; i<N; i++) {\n            const W = new Array(80);\n\n            \/\/ 1 - prepare message schedule 'W'\n            for (let t=0;  t<16; t++) W[t] = M[i][t];\n            for (let t=16; t<80; t++) {\n                W[t] = (Sha512.s1(W[t-2]).add(W[t-7]).add(Sha512.s0(W[t-15])).add(W[t-16]));\n            }\n\n            \/\/ 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n            let a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], f = H[5], g = H[6], h = H[7];\n\n            \/\/ 3 - main loop (note 'addition modulo 2^64')\n            for (let t=0; t<80; t++) {\n                const T1 = h.add(Sha512.S1(e)).add(Sha512.Ch(e, f, g)).add(K[t]).add(W[t]);\n                const T2 = Sha512.S0(a).add(Sha512.Maj(a, b, c));\n                h = g;\n                g = f;\n                f = e;\n                e = d.add(T1);\n                d = c;\n                c = b;\n                b = a;\n                a = T1.add(T2);\n            }\n\n            \/\/ 4 - compute the new intermediate hash value\n            H[0] = H[0].add(a);\n            H[1] = H[1].add(b);\n            H[2] = H[2].add(c);\n            H[3] = H[3].add(d);\n            H[4] = H[4].add(e);\n            H[5] = H[5].add(f);\n            H[6] = H[6].add(g);\n            H[7] = H[7].add(h);\n        }\n\n        \/\/ convert H0..H7 to hex strings (with leading zeros)\n        for (let h=0; h<H.length; h++) H[h] = H[h].toString();\n\n        \/\/ concatenate H0..H7, with separator if required\n        const separator = opt.outFormat=='hex-w' ? ' ' : '';\n\n        return H.join(separator);\n\n        \/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\n\n        function utf8Encode(str) {\n            try {\n                return new TextEncoder().encode(str, 'utf-8').reduce((prev, curr) => prev + String.fromCharCode(curr), '');\n            } catch (e) { \/\/ no TextEncoder available?\n                return unescape(encodeURIComponent(str)); \/\/ monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html\n            }\n        }\n\n        function hexBytesToString(hexStr) { \/\/ convert string of hex numbers to a string of chars (eg '616263' -> 'abc').\n            const str = hexStr.replace(' ', ''); \/\/ allow space-separated groups\n            return str=='' ? '' : str.match(\/.{2}\/g).map(byte => String.fromCharCode(parseInt(byte, 16))).join('');\n        }\n    }\n\n\n    \/**\n     * Rotates right (circular right shift) value x by n positions [\u00a73.2.4].\n     * @private\n     *\/\n    static ROTR(x, n) { \/\/ emulates (x >>> n) | (x << (64-n)\n        if (n == 0) return x;\n        if (n == 32) return new Sha512.Long(x.lo, x.hi);\n\n        let hi = x.hi, lo = x.lo;\n\n        if (n > 32) {\n            [ lo, hi ] = [ hi, lo ]; \/\/ swap hi\/lo\n            n -= 32;\n        }\n\n        const hi1 = (hi >>> n) | (lo << (32-n));\n        const lo1 = (lo >>> n) | (hi << (32-n));\n\n        return new Sha512.Long(hi1, lo1);\n    }\n\n\n    \/**\n     * Logical functions [\u00a74.1.3].\n     * @private\n     *\/\n    static S0(x) { return Sha512.ROTR(x, 28).xor(Sha512.ROTR(x, 34)).xor(Sha512.ROTR(x, 39)); }\n    static S1(x) { return Sha512.ROTR(x, 14).xor(Sha512.ROTR(x, 18)).xor(Sha512.ROTR(x, 41)); }\n    static s0(x) { return Sha512.ROTR(x,  1).xor(Sha512.ROTR(x,  8)).xor(x.shr(7)); }\n    static s1(x) { return Sha512.ROTR(x, 19).xor(Sha512.ROTR(x, 61)).xor(x.shr(6)); }\n    static Ch(x, y, z)  { return (x.and(y)).xor(x.not().and(z)); }         \/\/ 'choice'\n    static Maj(x, y, z) { return (x.and(y)).xor(x.and(z)).xor(y.and(z)); } \/\/ 'majority'\n\n}\n\n\/**\n * JavaScript has no support for 64-bit integers; this class provides methods required to support\n * 64-bit unsigned integers within Sha256.\n *\n * All string manipulation is radix 16. Note n >>> 0 coerces n to unsigned 32-bit value.\n *\/\nSha512.Long = class {\n\n    constructor(hi, lo) {\n        this.hi = hi >>> 0;\n        this.lo = lo >>> 0;\n    }\n\n    static fromString(str) {\n        const hi = parseInt(str.slice(0, -8), 16);\n        const lo = parseInt(str.slice(-8), 16);\n\n        return new Sha512.Long(hi, lo);\n    }\n\n    toString() {\n        const hi = ('00000000'+this.hi.toString(16)).slice(-8);\n        const lo = ('00000000'+this.lo.toString(16)).slice(-8);\n\n        return hi + lo;\n    }\n\n    add(that) { \/\/ addition modulo 2^64\n        const lo = this.lo + that.lo;\n        const hi = this.hi + that.hi + (lo>0x100000000 ? 1 : 0); \/\/ carry top bit if lo > 2^32\n\n        return new Sha512.Long(hi >>> 0, lo >>> 0);\n    }\n\n    and(that) { \/\/ &\n        return new Sha512.Long(this.hi & that.hi, this.lo & that.lo);\n    }\n\n    xor(that) { \/\/ ^\n        return new Sha512.Long(this.hi ^ that.hi, this.lo ^ that.lo);\n    }\n\n    not() {  \/\/ ~\n        return new Sha512.Long(~this.hi, ~this.lo);\n    }\n\n    shr(n) { \/\/ >>>\n        if (n ==  0) return this;\n        if (n == 32) return new Sha512.Long(0, this.hi);\n        if (n >  32) return new Sha512.Long(0, this.hi >>> n-32);\n        \/* n < 32 *\/ return new Sha512.Long(this.hi >>> n, this.lo >>> n | this.hi << (32-n));\n    }\n\n};\n\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\nvar authdata = postman.getEnvironmentVariable(\"authdata\");\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;\n\/\/var signatureCipher = \"POST&https%3A%2F%2Fsandbox.interswitchng.com%2Fapi%2Fv3%2Fpurchases&1515061497&33861830&IKIA9614B82064D632E9B6418DF358A6A4AEA84D7218&XCTiBtLy1G9chAnyg0z3BcaFK4cVpwDg\/GTw2EmjTZ8=\";\npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha512.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);\npostman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n    \"customerId\": \"JOnJazzy@gmail.com\",\r\n    \"amount\": \"{{amount}}\",\r\n    \"authData\":  \"{{authdata}}\",\r\n    \"currency\": \"NGN\",\r\n    \"transactionRef\": \"JB-{{Timestamp}}-NoOTP\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: SHA512\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "5618ca95-9f7a-4f3f-bd09-bd5381c5e74c",
            "name": "Validation Request - OTP",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases\/validations\/otps\/auths",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "309e7406-6c0b-4a36-be5b-fc5ea814d24e",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "",
                            "",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                }
            ],
            "folder": "3f0e2bab-c10b-46b3-9123-b10238911ded",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\n\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": null,
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\n \"transactionRef\": \"{{transactionRef}}\",\n \"otp\":\"770718\"\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "63345129-a3c1-4d76-8c69-f3cfb9b80958",
            "name": "Passport Request",
            "url": "https:\/\/sandbox.interswitchng.com\/passport\/oauth\/token",
            "description": "",
            "data": [
                {
                    "key": "grant_type",
                    "value": "client_credentials",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "enabled": true,
                    "description": ""
                },
                {
                    "key": "Authorization",
                    "value": "{{Authorization}}",
                    "enabled": true,
                    "description": ""
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "\/\/Calculate Authorisation",
                            "var authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);",
                            "",
                            "\/\/Set Environment Variable",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);"
                        ]
                    }
                }
            ],
            "folder": "01ba8ad3-76ce-46af-b8f6-491876c55ec7",
            "preRequestScript": "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\/\/Calculate Authorisation\nvar authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);\n\n\/\/Set Environment Variable\npostman.setEnvironmentVariable(\"Authorization\", authorization);\n",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\nAuthorization: {{Authorization}}\n",
            "pathVariables": []
        },
        {
            "id": "6a418e63-0841-49ea-9284-3211fa7790e1",
            "name": "Purchase With Card",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "b6cb5023-aee6-4db0-91f5-52a0318b7808",
                        "type": "text\/javascript",
                        "exec": [
                            "",
                            "var amount = 666.66;",
                            "var authdata =  \"m\/BdlV1ijjNRmFlepl5N\/Kcjfc8kZK1YeMo5FP8SGiFYLpj9AQkuBn78ripd2IzIDebRSy5CutPbDyrn+GpPnBlprP4FrGSiRWwjpOqJ9\/rd5Y0M4KicOiawlWhDP90VQ4WD1Lu3woVsdQ0FNp5vjpwHgQ7r9B+2oaZFYAr5h0UtOnt00DcYCXYFr7frQCOUXNoFpvLadYbdLZ18\/T9Qb2K\/j2sKE6x3l8d5M5kUwgOoACNGyvfYPN27f9yoQwLaN7JE71DVc5etAJFeHXrWwb+JwGNvT+WL1y4WruX4qgqZ2V1x2H\/z6zke2E34+dX3E9v\/8agmeBDtmYQj0TfJVA==\";",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "08aa97c7-132f-47b0-b579-467331935de3",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);",
                            "postman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);"
                        ]
                    }
                }
            ],
            "folder": "6125dfee-e7f3-40c8-a9cd-569d9da26683",
            "preRequestScript": "\nvar amount = 666.66;\nvar authdata =  \"m\/BdlV1ijjNRmFlepl5N\/Kcjfc8kZK1YeMo5FP8SGiFYLpj9AQkuBn78ripd2IzIDebRSy5CutPbDyrn+GpPnBlprP4FrGSiRWwjpOqJ9\/rd5Y0M4KicOiawlWhDP90VQ4WD1Lu3woVsdQ0FNp5vjpwHgQ7r9B+2oaZFYAr5h0UtOnt00DcYCXYFr7frQCOUXNoFpvLadYbdLZ18\/T9Qb2K\/j2sKE6x3l8d5M5kUwgOoACNGyvfYPN27f9yoQwLaN7JE71DVc5etAJFeHXrWwb+JwGNvT+WL1y4WruX4qgqZ2V1x2H\/z6zke2E34+dX3E9v\/8agmeBDtmYQj0TfJVA==\";\n\n\n\n\n\n\n\n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);\npostman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n    \"customerId\": \"JOnJazzy@gmail.com\",\r\n    \"amount\": \"666.66\",\r\n    \"authData\":\r\n    \"m\/BdlV1ijjNRmFlepl5N\/Kcjfc8kZK1YeMo5FP8SGiFYLpj9AQkuBn78ripd2IzIDebRSy5CutPbDyrn+GpPnBlprP4FrGSiRWwjpOqJ9\/rd5Y0M4KicOiawlWhDP90VQ4WD1Lu3woVsdQ0FNp5vjpwHgQ7r9B+2oaZFYAr5h0UtOnt00DcYCXYFr7frQCOUXNoFpvLadYbdLZ18\/T9Qb2K\/j2sKE6x3l8d5M5kUwgOoACNGyvfYPN27f9yoQwLaN7JE71DVc5etAJFeHXrWwb+JwGNvT+WL1y4WruX4qgqZ2V1x2H\/z6zke2E34+dX3E9v\/8agmeBDtmYQj0TfJVA==\",\r\n    \"currency\": \"NGN\",\r\n    \"transactionRef\": \"JB-{{Timestamp}}-OTPPurchase\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "6f22370b-aff3-4b2d-b828-182c3a1e62b3",
            "name": "Passport Request",
            "url": "https:\/\/sandbox.interswitchng.com\/passport\/oauth\/token",
            "description": "",
            "data": [
                {
                    "key": "grant_type",
                    "value": "client_credentials",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Authorization}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "8d151ee4-f974-4ab3-a0b3-d5e31a1722db",
                        "type": "text\/javascript",
                        "exec": [
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "\/\/Calculate Authorisation",
                            "var authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);",
                            "",
                            "\/\/Set Environment Variable",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "89dd2a22-8b40-4a48-a691-cf093c6cc60c",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);"
                        ]
                    }
                }
            ],
            "folder": "65f68ed7-e8d0-4e09-96f7-dbfc15a332b7",
            "preRequestScript": "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\/\/Calculate Authorisation\nvar authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);\n\n\/\/Set Environment Variable\npostman.setEnvironmentVariable(\"Authorization\", authorization);\n",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\nAuthorization: {{Authorization}}\n",
            "pathVariables": []
        },
        {
            "id": "70463a62-8471-49c1-9883-f7e52e12eff2",
            "name": "Recurrent Purchase",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v2\/purchases\/recurrents",
            "description": null,
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "6c934a63-e6e0-4cba-a6af-1efdc4459817",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var authdata =",
                            "    \"HjU+8w8uO3OzYB3P1Sg7vSxYR7DfgBXH7wDkHEEtXnEdMe4y\/a5Pd3YpvlYOHdhAZEV02m77Hyl6pN6bljsBBGU+2gJMxSxTOZYYqY05\/Cc9t9EieB5XeIlNsjDXj4+l3vl5xL9Kz\/z69hsxtt7jNXUaSkT1WzoyCX+bFlNfN2KiFeTVu5Wv2YDO3ai2Obu4rdbTTa7Gjg15NwouBmG4dpfsKyYr5+FoM5qlJtiPZyyVt89dwaRKQa4AaX68AukqOXj9BR2ldJ12VeRJBKg3fuA6TSpQSJmxrwapC+yLWZItp3nXgAMtXKO4pxoaVomnFyvwTQAmJ4CnY2pVlndgxw==\";",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "c4aaf0d7-fae7-49cc-80d0-0f2f435d1c17",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);"
                        ]
                    }
                }
            ],
            "folder": "523678fc-9b3e-4567-b4c3-98e4c5c5df73",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\nvar authdata =\n    \"HjU+8w8uO3OzYB3P1Sg7vSxYR7DfgBXH7wDkHEEtXnEdMe4y\/a5Pd3YpvlYOHdhAZEV02m77Hyl6pN6bljsBBGU+2gJMxSxTOZYYqY05\/Cc9t9EieB5XeIlNsjDXj4+l3vl5xL9Kz\/z69hsxtt7jNXUaSkT1WzoyCX+bFlNfN2KiFeTVu5Wv2YDO3ai2Obu4rdbTTa7Gjg15NwouBmG4dpfsKyYr5+FoM5qlJtiPZyyVt89dwaRKQa4AaX68AukqOXj9BR2ldJ12VeRJBKg3fuA6TSpQSJmxrwapC+yLWZItp3nXgAMtXKO4pxoaVomnFyvwTQAmJ4CnY2pVlndgxw==\";\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n    \"customerId\": \"CustID-{{Timestamp}}\",\r\n    \"amount\": \"90\",\r\n    \"currency\":\"NGN\",\r\n    \"token\": \"{{token}}\",\r\n  \"tokenExpiryDate\": \"{{tokenExpiryDate}}\",\r\n    \"transactionRef\": \"JB-{{Timestamp}}-ReccPurch\"\r\n}  \r\n \r\n",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "732eb5ff-7493-42b2-a1ed-f7c5be53ac49",
            "name": "Get Transaction Status - {{TransactionReference}}",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": null,
            "data": null,
            "dataMode": null,
            "headerData": [
                {
                    "key": "Amount",
                    "value": "666.66",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "transactionRef",
                    "value": "{{transactionRef}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "GET",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "d2424262-577b-4b77-ba7a-8fd03aeb46aa",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var transactionRef = \"JB-1517239112-NoOTP\";",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                }
            ],
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\nvar transactionRef = \"JB-1517239112-NoOTP\";\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": null,
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Amount: 666.66\ntransactionRef: {{transactionRef}}\nContent-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "7b7a2fb5-e3e2-425a-88fd-53f1c078f667",
            "name": "Passport Request",
            "url": "https:\/\/sandbox.interswitchng.com\/passport\/oauth\/token",
            "description": "",
            "data": [
                {
                    "key": "grant_type",
                    "value": "client_credentials",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Authorization}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "6d584b7e-6406-4bb8-87c7-40358c6f361a",
                        "type": "text\/javascript",
                        "exec": [
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "\/\/Calculate Authorisation",
                            "var authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);",
                            "",
                            "\/\/Set Environment Variable",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "e7310b20-22c6-4f1a-82c1-63c63b2f1b51",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);"
                        ]
                    }
                }
            ],
            "folder": "3f0e2bab-c10b-46b3-9123-b10238911ded",
            "preRequestScript": "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\/\/Calculate Authorisation\nvar authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);\n\n\/\/Set Environment Variable\npostman.setEnvironmentVariable(\"Authorization\", authorization);\n",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\nAuthorization: {{Authorization}}\n",
            "pathVariables": []
        },
        {
            "id": "8773a082-d85f-49b0-bece-1dad3461ed96",
            "name": "VISA Auth Page (Load Page for iPIN)",
            "url": "https:\/\/testcustomer34.cardinalcommerce.com\/V3DSStart?osb=visa-3&VAA=B",
            "description": "",
            "data": [
                {
                    "key": "TermUrl",
                    "value": "{{TermUrl}}",
                    "type": "text",
                    "enabled": true
                },
                {
                    "key": "PaReq",
                    "value": "{{PaReq}}",
                    "type": "text",
                    "enabled": true
                },
                {
                    "key": "MD",
                    "value": "{{MD}}",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "enabled": true,
                    "description": ""
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "osb",
                    "value": "visa-3",
                    "equals": true,
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "VAA",
                    "value": "B",
                    "equals": true,
                    "description": "",
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": "9f3f9f1a-3366-4628-9282-3c8731dce6d0",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\n",
            "pathVariables": []
        },
        {
            "id": "89490369-e711-4940-a6b5-679f478932c8",
            "name": "Get Transaction 2.0 ",
            "url": "https:\/\/sandbox.interswitchng.com\/collections\/api\/v1\/gettransaction.json?getacquirerdata=true&transactionreference={{transactionRef}}&amount=66666&merchantcode=MX187",
            "description": "Returns Bank Code and Account Number",
            "data": null,
            "dataMode": null,
            "headerData": [],
            "method": "GET",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "getacquirerdata",
                    "value": "true",
                    "equals": true,
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "transactionreference",
                    "value": "{{transactionRef}}",
                    "equals": true,
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "amount",
                    "value": "66666",
                    "equals": true,
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "merchantcode",
                    "value": "MX187",
                    "equals": true,
                    "description": "",
                    "enabled": true
                }
            ],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "fecada18-90f3-42c1-aa7e-92341f5e8004",
                        "type": "text\/javascript",
                        "exec": [
                            "var amount = 666.66",
                            "",
                            "",
                            "",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var minoramount = amount * 100;",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"minoramount\",minoramount);",
                            ""
                        ]
                    }
                }
            ],
            "folder": "a783ae42-38ba-46b4-b3c2-c7d1b28e72c9",
            "preRequestScript": "var amount = 666.66\n\n\n\n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\nvar minoramount = amount * 100;\n\n\npostman.setEnvironmentVariable(\"minoramount\",minoramount);\n",
            "tests": null,
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "",
            "pathVariables": []
        },
        {
            "id": "8f97d2b5-2bcf-4a9b-83a2-628a73340c69",
            "name": "OTP Validation Request",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases\/otps\/auths",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "bc769960-0e64-4c33-a2c8-5ee9800ed2b0",
                        "type": "text\/javascript",
                        "exec": [
                            "\/\/  Enter OTP Here  \/\/",
                            "var otp = \"849732\";",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var authdata = \"SkQ43X4l9dTqQJ4LaC6ORGb7WhFVBXOhjRy08vHF5JNFBQFN3YUWXrB\/gPpC2CLpAizl0F9cDNyW9JnAs9Wm4eaiGYjtFboGT4i3y9CCdpyXIlRIEmilyzUfWlGIvqnJTYBzQC5o+TLgEzWdu17pXmyXkvhZs13SPVzTVBHmnq8fE9fL6RfR0BjKPClzeJCaKPsouR2uH6pSVIl7zx\/gHrXS2hhs9IjBCIE7o5IB40HuKXbb8\/62uVpD262x1zJzBX4eoyga\/AJKN0052HTO8HEPQ78Z7ggkS5e0jfFF5Nf6u1j7Mr2BiZX7DFtZgvuMw8AWwV2ku20JDrtNEwOBxw==\";",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + otp + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                }
            ],
            "folder": "65f68ed7-e8d0-4e09-96f7-dbfc15a332b7",
            "preRequestScript": "\/\/  Enter OTP Here  \/\/\nvar otp = \"849732\";\n\n\n\n\n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\nvar authdata = \"SkQ43X4l9dTqQJ4LaC6ORGb7WhFVBXOhjRy08vHF5JNFBQFN3YUWXrB\/gPpC2CLpAizl0F9cDNyW9JnAs9Wm4eaiGYjtFboGT4i3y9CCdpyXIlRIEmilyzUfWlGIvqnJTYBzQC5o+TLgEzWdu17pXmyXkvhZs13SPVzTVBHmnq8fE9fL6RfR0BjKPClzeJCaKPsouR2uH6pSVIl7zx\/gHrXS2hhs9IjBCIE7o5IB40HuKXbb8\/62uVpD262x1zJzBX4eoyga\/AJKN0052HTO8HEPQ78Z7ggkS5e0jfFF5Nf6u1j7Mr2BiZX7DFtZgvuMw8AWwV2ku20JDrtNEwOBxw==\";\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + otp + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": null,
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n  \"paymentId\":\"{{paymentId}}\",\r\n  \"authData\":\r\n  \"SkQ43X4l9dTqQJ4LaC6ORGb7WhFVBXOhjRy08vHF5JNFBQFN3YUWXrB\/gPpC2CLpAizl0F9cDNyW9JnAs9Wm4eaiGYjtFboGT4i3y9CCdpyXIlRIEmilyzUfWlGIvqnJTYBzQC5o+TLgEzWdu17pXmyXkvhZs13SPVzTVBHmnq8fE9fL6RfR0BjKPClzeJCaKPsouR2uH6pSVIl7zx\/gHrXS2hhs9IjBCIE7o5IB40HuKXbb8\/62uVpD262x1zJzBX4eoyga\/AJKN0052HTO8HEPQ78Z7ggkS5e0jfFF5Nf6u1j7Mr2BiZX7DFtZgvuMw8AWwV2ku20JDrtNEwOBxw==\",\r\n  \"otp\":\"849732\"               \r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "a324d2d3-5d20-4a5c-b286-9518b3614e18",
            "name": "Passport Request",
            "url": "https:\/\/sandbox.interswitchng.com\/passport\/oauth\/token",
            "description": "",
            "data": [
                {
                    "key": "grant_type",
                    "value": "client_credentials",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Authorization}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "\/\/Calculate Authorisation",
                            "var authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);",
                            "",
                            "\/\/Set Environment Variable",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);"
                        ]
                    }
                }
            ],
            "folder": "15bf76e0-e11a-45b3-b8b0-80bb764dec85",
            "preRequestScript": "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\/\/Calculate Authorisation\nvar authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);\n\n\/\/Set Environment Variable\npostman.setEnvironmentVariable(\"Authorization\", authorization);\n",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\nAuthorization: {{Authorization}}\n",
            "pathVariables": []
        },
        {
            "id": "b055eb16-b7ea-477f-b99c-0394e0a896d3",
            "name": "VISA -> ISW CallBack",
            "url": "https:\/\/sandbox.interswitchng.com\/collections\/api\/v1\/pay\/cardinalCallBack",
            "description": null,
            "data": [
                {
                    "key": "MD",
                    "value": "240412",
                    "description": "",
                    "type": "text",
                    "enabled": true
                },
                {
                    "key": "PaRes",
                    "value": "eNqdWFmXqkgSfudX1Ln9aHezu\/Sx6pxMdhQUZBHe2GSRRQQB\/fWDWnWr+k6dmZ7xxcwg8suIjIgvEpZGco4idhcFl3P0tlSipvHi6CUNX3+YxGI33+Nz5lJV0bRXYqrHfrwtt0CPmoeCQKXTbWGEV4trOPD6SoxPu+jcpFX5hv+J\/Uks0Y\/pCHwOEq9s35ZeUENJfaMoiiTJJfo+XRbRWWLfcIKk6OkSfc6W6Oey7eU+akYbhzR8swyJNm+JoxgJG9qLzjVc0rADLLyB1yV611iGXhu9ERg+x2iMesHov\/DZXxS1RB\/y5ekOB4rqMmJP778l+lW0HI\/jHJXB9Y2+P\/o5W0bDqSqjUWN07ud4iX5ad\/LKN+zvv1H1Ll0a+7dlmxa\/WLX4ixgVHvJl03rtpXlzluj7aBl4XfcGAICQh2KigfuPjcyI5xSmUpPJ6O1DZRkF6RtGj0aN\/49VII+rc9omxd3UvwuW6N0U9BHJt+Uujctxs3P0MhR52bz+SNr29BeK9n3\/Z0\/+WZ1jlBi9QLEFOiqETRr\/9uO5Kgql8lD9T8sYr6zKNPDy9Oa1Y2YoUZtU4ctP276DMfQ7Eo7qHPPHCPVHgFPlH3cJRuL0iIl+D\/rFs3+yy6\/Gnhvvjybx8PsGvwC9LfXoEN0zInoxden1x2\/flQKbxlHT\/j9bf2z7FeEDz\/LyS\/TGMyrUVA6V3TKQSGG\/sfdrduace2H++rHuqblEf9r67sgzal9O56kobMlmWGE3\/0AxjnFMb+UaTvOrbODMArTzCzPTxJAgtvNDM2cFm6wOGOHMavSWUfQmSmWBJLadszgjm7Wry+micA9Ycz46Ub3YiVqLVbvuSuMneSbNaPm2ik4nQj5tBCusSTyw0gvPxxTe6rAlE0VqxEuGhKpl0LNOnmiZG\/dyfPTMQy3HHbYRTkHDsmF1pcoBzMoOC+g+npnp4nCZ8t4m9aarRIdHxjtKa3eLsD61JeCE3aN9KDYX6cofh37Qb0R7Yi1cWiycWUu7zFFXbKowPN1JNP3KOuRZn60ujihX8gRtIIsjh77gSMObXQsHG+AtV3wQruEqkOb06dpzpMTz6IIzCrvofJ5sIn4Dt672+volg96jsoquzyjsaWzBeq33HO0ufhYFreqNbMCor4x3DtPSy1\/YqKheHsE7\/\/6yMT8fAGY3Cj7nTFWM3BlEv7+sX5WRm6pRf2e8bpK0+v2FeTV3S\/TXfR4bM9G5TQ9jDY3kqEgSa98YBjS7GPQSBLHEgJ3Us5ojrypXSrpABRrHQw30bsatFXAUAG5yMFEYy1IG1gBrGKsWMq5UILeoPHs+iBkI7kIIKoU31SQo9JNf8I1GLFrftq4OYcbj+Bqw3E6B4AHI9L2sHPMj4to05tnuSdG1nosd1tI0lgWt6e5VTBJV3Ekhqxkg4ntsUFjuqmTBoGaAVlnZG2XXp0wbkA+hIs4H5gbkp0WOAXLLUDSsZ\/oHuMT1+tYT8k7R5ne37zKR6131bohPSgMiZMB5d8fgvrgjcWrn23geFGqu6GbPPQHXXD+wzl4+ejad+AyEGq4MogF85AmiGDz3FUTPfXsem0Re+oV1HQMCpQyoMD7WyTEVFj0G7wEAYMMAbQ7uzxEmXo0TDtQcGeKpXNRJDkNCwmW45c1pQAVOBtaXxtYXHKfqk6HwF3m8d46tmolCHFUk9IZ2J\/jIlKJEfLZIvLhzCiXNIigFfYtOd2jEri\/6Qlko7IQl+yAINuZILiFIjtKp47SpbZywuUabWCmVszOSNNJMqzdWKGHhXga33KeSlrsCdmVeFV4Khfw6y3u+sdBso2Ga0kCYkrteNtmdnWeXvTYx5S3hrREi9tV96MMOHnFCjOs9K9GSE21OZt3hl87e66dQkSfHoVSwq1VTUjMjCQh2UJ6XCetsOr0U97daRLCI2yV9EiTKlHXWk7qrKYFJRaufWwZzWV\/qdaONNLyqNrdjgw8bsSm08OglNHFBlV5igQZgRTY9EhnP3BF1hQMZAArTC4zNCDsgCBNOGrNRO\/AJvg0E62LiqiJxYX6PpLPXc5eBrLuXHwmNOASPuQYIH2AaxfGxZuqxoJupb2ldMjD4GXSx1q7RGD96Ui\/e80nHMgjjnq+AeZBSJQ1xDMHt3TxVYYRVSmIfsenqxn1XsGzscEA15D2Hzfedc0ZD+iBhpbzZLBYXa+tbSLciWpZXj0Gkn3eO2XI4U1ARtaluA9HaFNuoZE03GGoPtH3apl3H+wfOMHujEJK48o+X80HuJrMpgookeYpxy1X7m8\/RRaPjJ+bgMgymy543OV62zMV1x8bJnhf1Qjmvt3h2OcaT24BSIabNz\/HRdBnu9clYXwnqO8ZiMHZkrKz4wljfHkAfsf+QsdjbveLu1RkoY+Llfql3QcZFCuyf7BT3lkbwV1fIL449sD6Bt2NcM3cHWcQn5V7RpZ4Dz\/pnwfG6s\/U7yMktjgNvAOO99BWW1\/OA1GKzWHQh83cmQxTjTmXcTTXUTyoztJ8yRXD+I5Ox4MlkiKJTvfi0ZsVC65ONvjDWnb2CEgxcBrQnYKMwhiy7YxqP5Vp4I9chCpQe\/oO+X1uCdRtNvoW2FGsY18fu\/NdDh8+sw0aWEmRQCaPH1x6n9QGRvA2ghADanijgN3Pqe9VB0rflpuWFPDnV3bRfe0JvHg4T+uicZgpXXCVTuYic6oFOP6byrr0yiw2yLzbTeBau2fmqFPApsyjPQzavIFWQIw+ZVDE5OPZGKIuk2FbTWwK7Gjbd4bYgEy5e7dUpF67UixUjl\/rW2lOw3vSmOvVhvdJ25D0jABCy6Abp97wJuV5jFAD6NXBkR3Il4PiUFnMqhHNbNBf9vWEZJtbHOmFdxpxIQsE6joebB4\/w59mdBxSIPcDYWLMh1OepdJXJvWG566uE8bNdfOU9xDCqs2KAw4MfdgonsMCOoc7F2RbFbT\/OHZcQhKFkbK8uU7kfc+eXNmHe2wREYg3OLysTXZBz1FrRDG\/KqYaam71HnMUrPgDSL3Ec3zDTHE6bUGtnapZoQbIy0rWhNTF9QOtdruLI2nUuHQWklbFZuZxwTuUaGFP5WE9W+6Rld1Sc1Se+nG8yt5b12cE7c\/ok9GkalXfd6SLGmT8YhxlAij4dS\/7GmjJlWZfUWc2Nms+vhHW2RD5+\/ad132Vj3afRR93LQGaH7YTLLT1ZKQATmF0t7CSfZB+paAJFjP+tYJDvKuZr72fBZ+\/\/TzcZ5L9dZT5vMj\/vBuNNZnjeZHi580ceuBcSIiaBOgZ+UDKOVAynVw1wte+y7CHDfsoySCla0zNPSwWuly3zxqkKaB4bIwzoOYNITv6N297P48F7fS8Y9r2mF9d\/ygvIfyEGS4HKBy8o77yw84kFNi6GY+0fPoKBfERjzE0wEoAKWAam2grGGkNF54Pf6RrH7M\/OYtpuZ9rGrhkDEFmJ0hm5QGO0xnwlDTRGR87E5JDOjrfVFV612j2KN0em5yQK9t1K9nqs5Q00I7ksjI\/RYJ1yZxfV3JbemKxCxd7uMKtFJba2EFl5VUl050wc7IixBj6lBgpWYS6XhxxFWyFbYbXK3trZEaXUaMfbV79Otff7AA56I3t2cORnC5ekG7qwCkq2hTBJGrfPi\/pEpQHH\/VsL\/04X+VBmwUPZgMDsx0BC9PZ9fccaSPk5FHLI90qkyhGXOn3paYjbmuI59TKz9ac0Pp236uEkcBx5vok+pCul4IL90Ph+K+nw0iXbedHGkZuL+WWt3bBanwRERed9hAz9LMsPQKzrMby7jFmtxUszR9WqnAWTWVrvbq0mKtCK\/Bkx7b1tJ0j+nlsHql0t\/G2s17ZJnNxkiqyurrgA39Y3+vk2hP58Q\/p8d3p8EHp8oLp\/wvj64epf0+MhDA==",
                    "description": "",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Accept",
                    "value": "text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/webp,image\/apng,*\/*;q=0.8",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Accept-Language",
                    "value": "fr-FR,fr;q=0.9,en-GB;q=0.8,en;q=0.7,fr-CA;q=0.6,en-US;q=0.5",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Content-Length",
                    "value": "4170",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "User-Agent",
                    "value": "Mozilla\/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/65.0.3325.146 Safari\/537.36",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": "9f3f9f1a-3366-4628-9282-3c8731dce6d0",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Accept: text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/webp,image\/apng,*\/*;q=0.8\nAccept-Encoding: gzip, deflate, br\nAccept-Language: fr-FR,fr;q=0.9,en-GB;q=0.8,en;q=0.7,fr-CA;q=0.6,en-US;q=0.5\nContent-Length: 4170\nContent-Type: application\/x-www-form-urlencoded\nUser-Agent: Mozilla\/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/65.0.3325.146 Safari\/537.36\n",
            "pathVariables": []
        },
        {
            "id": "b3415eab-7e99-4716-b588-5442ddd0633b",
            "name": "OTP Validation Request",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases\/otps\/auths",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "aeef468a-73bf-476a-ae34-a90182c45c5c",
                        "type": "text\/javascript",
                        "exec": [
                            "\/\/Enter OTP here",
                            "var otp = \"738447\";",
                            "",
                            "var authdata = \"m\/BdlV1ijjNRmFlepl5N\/Kcjfc8kZK1YeMo5FP8SGiFYLpj9AQkuBn78ripd2IzIDebRSy5CutPbDyrn+GpPnBlprP4FrGSiRWwjpOqJ9\/rd5Y0M4KicOiawlWhDP90VQ4WD1Lu3woVsdQ0FNp5vjpwHgQ7r9B+2oaZFYAr5h0UtOnt00DcYCXYFr7frQCOUXNoFpvLadYbdLZ18\/T9Qb2K\/j2sKE6x3l8d5M5kUwgOoACNGyvfYPN27f9yoQwLaN7JE71DVc5etAJFeHXrWwb+JwGNvT+WL1y4WruX4qgqZ2V1x2H\/z6zke2E34+dX3E9v\/8agmeBDtmYQj0TfJVA==\";",
                            "",
                            "",
                            "",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "",
                            "",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + otp + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "5dc84418-84bc-4536-b5f5-61d54f6392e9",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"token\", jsonData.token);",
                            "postman.setEnvironmentVariable(\"tokenExpiryDate\", jsonData.tokenExpiryDate);",
                            "postman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);"
                        ]
                    }
                }
            ],
            "folder": "6125dfee-e7f3-40c8-a9cd-569d9da26683",
            "preRequestScript": "\/\/Enter OTP here\nvar otp = \"738447\";\n\nvar authdata = \"m\/BdlV1ijjNRmFlepl5N\/Kcjfc8kZK1YeMo5FP8SGiFYLpj9AQkuBn78ripd2IzIDebRSy5CutPbDyrn+GpPnBlprP4FrGSiRWwjpOqJ9\/rd5Y0M4KicOiawlWhDP90VQ4WD1Lu3woVsdQ0FNp5vjpwHgQ7r9B+2oaZFYAr5h0UtOnt00DcYCXYFr7frQCOUXNoFpvLadYbdLZ18\/T9Qb2K\/j2sKE6x3l8d5M5kUwgOoACNGyvfYPN27f9yoQwLaN7JE71DVc5etAJFeHXrWwb+JwGNvT+WL1y4WruX4qgqZ2V1x2H\/z6zke2E34+dX3E9v\/8agmeBDtmYQj0TfJVA==\";\n\n\n\n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\n\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\n\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" + timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + otp + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"token\", jsonData.token);\npostman.setEnvironmentVariable(\"tokenExpiryDate\", jsonData.tokenExpiryDate);\npostman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n  \"paymentId\":\"{{paymentId}}\",\r\n  \"authData\":\r\n  \"m\/BdlV1ijjNRmFlepl5N\/Kcjfc8kZK1YeMo5FP8SGiFYLpj9AQkuBn78ripd2IzIDebRSy5CutPbDyrn+GpPnBlprP4FrGSiRWwjpOqJ9\/rd5Y0M4KicOiawlWhDP90VQ4WD1Lu3woVsdQ0FNp5vjpwHgQ7r9B+2oaZFYAr5h0UtOnt00DcYCXYFr7frQCOUXNoFpvLadYbdLZ18\/T9Qb2K\/j2sKE6x3l8d5M5kUwgOoACNGyvfYPN27f9yoQwLaN7JE71DVc5etAJFeHXrWwb+JwGNvT+WL1y4WruX4qgqZ2V1x2H\/z6zke2E34+dX3E9v\/8agmeBDtmYQj0TfJVA==\",\r\n  \"otp\":\"738447\"               \r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "ba4830c6-ee4a-491b-bca4-d0f26b7f416d",
            "name": "Purchase With Card",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": "This illustrates how to make a basic purchase using a card.\n\nDue to regulation from PCI DSS, all card details are encrypted and data is sent in the form of AuthData which is a combination of the following details:\n\n - PAN\n - PIN\n - Expiry Date\n - CVV\n\nEncryption of these details is done using the BouncyCastle library and all implementations of it must be done in the language of your choice.\n\n\nYou can contact ipg@interswitchgroup.com for details or preferably see an example of its implementation from our Github repositories specified [here](https:\/\/github.com\/techquest)",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "4ee052da-ec45-460b-89de-8c5e8992fef6",
                        "type": "text\/javascript",
                        "exec": [
                            "var amount = 666.66",
                            "",
                            "",
                            "",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "var authdata = \"jGyoTA\/JJJOf\/12MMd\/1ypK9Av6yJXB7BiJZjEkA2tOQSnAGUOY764QybjZ24MTVWC08YOc6SJOfBQ+ZmQ\/6p5nc3uIAlbVYD8\/Bp67RLcu6EfQsfnRU7me1X4Kz4g2mBaMZWy9xYXIuVEz0PIgQlPQ3OW+87SS3uDYGojpWrT5uNi2G24JilKLCx6pX1bl3Cyy1YLNyw3aIk+Hs+lT2C2bNZjyTn4DAN2kSUCtEpK+1H3azjt7RJZ0ZU9eeRNHSrduurMISykdzkTR+TEfW1mQd914YBTCbaDJev6pMff0L25\/ffftUdHM+5mmBmHiE8B2LN2FKlOSDZQ4\/AKlCkQ==\";",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "32b456f3-28f2-404b-988f-016f9bbbbdcf",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);",
                            "postman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);"
                        ]
                    }
                }
            ],
            "folder": "4dd5ef12-5772-4ba0-b54c-5ee021789918",
            "preRequestScript": "var amount = 666.66\n\n\n\n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\nvar authdata = \"jGyoTA\/JJJOf\/12MMd\/1ypK9Av6yJXB7BiJZjEkA2tOQSnAGUOY764QybjZ24MTVWC08YOc6SJOfBQ+ZmQ\/6p5nc3uIAlbVYD8\/Bp67RLcu6EfQsfnRU7me1X4Kz4g2mBaMZWy9xYXIuVEz0PIgQlPQ3OW+87SS3uDYGojpWrT5uNi2G24JilKLCx6pX1bl3Cyy1YLNyw3aIk+Hs+lT2C2bNZjyTn4DAN2kSUCtEpK+1H3azjt7RJZ0ZU9eeRNHSrduurMISykdzkTR+TEfW1mQd914YBTCbaDJev6pMff0L25\/ffftUdHM+5mmBmHiE8B2LN2FKlOSDZQ4\/AKlCkQ==\";\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);\npostman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n    \"customerId\": \"JOnJazzy@gmail.com\",\r\n    \"amount\": \"666.66\",\r\n    \"authData\":\r\n    \"jGyoTA\/JJJOf\/12MMd\/1ypK9Av6yJXB7BiJZjEkA2tOQSnAGUOY764QybjZ24MTVWC08YOc6SJOfBQ+ZmQ\/6p5nc3uIAlbVYD8\/Bp67RLcu6EfQsfnRU7me1X4Kz4g2mBaMZWy9xYXIuVEz0PIgQlPQ3OW+87SS3uDYGojpWrT5uNi2G24JilKLCx6pX1bl3Cyy1YLNyw3aIk+Hs+lT2C2bNZjyTn4DAN2kSUCtEpK+1H3azjt7RJZ0ZU9eeRNHSrduurMISykdzkTR+TEfW1mQd914YBTCbaDJev6pMff0L25\/ffftUdHM+5mmBmHiE8B2LN2FKlOSDZQ4\/AKlCkQ==\",\r\n    \"currency\": \"NGN\",\r\n    \"transactionRef\": \"JB-{{Timestamp}}-NoOTP\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "c2244c4b-ba23-4f37-80db-3e1a8a818f0f",
            "name": "Purchase With Token",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "c9e451a3-a51e-4f0e-9732-3249d39dedfb",
                        "type": "text\/javascript",
                        "exec": [
                            "",
                            "var amount = 666.66;",
                            "var authdata =  \"QQaOpQg9fqq0p8Q6IpZHdWSNacfkGnU04Woq7AMhvZG5Ev+VbQAKYHIv95IM9tG1uUwRYA4eWz9WJ8CbMntoegW7nunrnWei2dgeQ50CfM5kefk4IRcK7yyCaM7kz0ifNorRFFF3et4C+saZ3Hm7XzyxivAOAIfZsmNdbRYPSOYm66+9tJix8mRpC0DCRg6Bn7pSx\/Gy3ewiataMTCX+0X9b3j0SiYNVUhP+BfpXZEX3XcqpThT4HJDTKaeBlFIrG4N53mw+eaHj2\/cg6VxWoMnv4HpAKYnG1Pyi+lnBCmtwJEmEd0r8+v4yLOAvm8rR2cM+jGtBRwsSjwmJ4Nj3FQ==\";",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "59b31e26-238f-44df-88c7-7784ece54bd2",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);",
                            "postman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);"
                        ]
                    }
                }
            ],
            "folder": "15bf76e0-e11a-45b3-b8b0-80bb764dec85",
            "preRequestScript": "\nvar amount = 666.66;\nvar authdata =  \"QQaOpQg9fqq0p8Q6IpZHdWSNacfkGnU04Woq7AMhvZG5Ev+VbQAKYHIv95IM9tG1uUwRYA4eWz9WJ8CbMntoegW7nunrnWei2dgeQ50CfM5kefk4IRcK7yyCaM7kz0ifNorRFFF3et4C+saZ3Hm7XzyxivAOAIfZsmNdbRYPSOYm66+9tJix8mRpC0DCRg6Bn7pSx\/Gy3ewiataMTCX+0X9b3j0SiYNVUhP+BfpXZEX3XcqpThT4HJDTKaeBlFIrG4N53mw+eaHj2\/cg6VxWoMnv4HpAKYnG1Pyi+lnBCmtwJEmEd0r8+v4yLOAvm8rR2cM+jGtBRwsSjwmJ4Nj3FQ==\";\n\n\n\n\n\n\n\n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);\npostman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n    \"customerId\": \"JOnJazzy@gmail.com\",\r\n    \"amount\": \"666.66\",\r\n    \"authData\":\r\n    \"QQaOpQg9fqq0p8Q6IpZHdWSNacfkGnU04Woq7AMhvZG5Ev+VbQAKYHIv95IM9tG1uUwRYA4eWz9WJ8CbMntoegW7nunrnWei2dgeQ50CfM5kefk4IRcK7yyCaM7kz0ifNorRFFF3et4C+saZ3Hm7XzyxivAOAIfZsmNdbRYPSOYm66+9tJix8mRpC0DCRg6Bn7pSx\/Gy3ewiataMTCX+0X9b3j0SiYNVUhP+BfpXZEX3XcqpThT4HJDTKaeBlFIrG4N53mw+eaHj2\/cg6VxWoMnv4HpAKYnG1Pyi+lnBCmtwJEmEd0r8+v4yLOAvm8rR2cM+jGtBRwsSjwmJ4Nj3FQ==\",\r\n    \"currency\": \"NGN\",\r\n    \"transactionRef\": \"JB-{{Timestamp}}-OTPPurchase\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "c4527547-c25d-4a08-a0b0-ea96a1f1caff",
            "name": "Validation Request",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases\/validations",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "faa2825e-2014-4a9b-8d8c-a64d1e1d1ac7",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "7909da63-f1b2-47eb-b77a-505a2dbe680b",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);"
                        ]
                    }
                }
            ],
            "folder": "3f0e2bab-c10b-46b3-9123-b10238911ded",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \npostman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n  \"transactionRef\": \"JB-{{Timestamp}}-Validate\",                   \r\n \"authData\":\"UX1NSY0cF988psw+rSUYPy1mUyFWPjKztmUHujTORVgbSCWSKp4Ow5d4\/1eq6\/oZBRHHTV3SAnGALpwnbyHdjN943Ode65owhehqkJ8TAS\/7ZNdRLl7hDRiU9TsZfLsDEMAYNEvPoFwye2BG0DIaLxPDAzPimpt5W5rJIjA7kMknOkHBwijkEM+F+UZGcLRB9Oj4QYlzK55bc2Wyhtqz29bAFQaL4hYqHuTQ+hD3IQnvGM7xKmRoxUTvii4LcGrXnRFbmdk7gJZf\/gaabrRlbTSbo5WqYeUAm2ksy81aVgRBFVENaeSBA+OFDLmB2l1knRMJmboy96K6oe0IwXQwGQ==\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "c5c81d08-cb53-4d8b-8af8-d3cdeed3c110",
            "name": "Enroll card for OTP",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases\/otps\/enrollments",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "a447628f-4a87-4ac5-bcfd-1489faa0ec2e",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                }
            ],
            "folder": "65f68ed7-e8d0-4e09-96f7-dbfc15a332b7",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": null,
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n    \"paymentId\":\"{{paymentId}}\",\r\n    \"mobilePhoneNumber\":\"+2348090673520\",\r\n    \"transactionRef\":\"{{TransactionRef}}\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "ceef4535-f140-4ef0-b8f0-ce2c02390558",
            "name": "Recurrent Get Token",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v2\/purchases\/validations\/recurrents",
            "description": null,
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "08604fab-c3b3-402b-a126-5aec7c45a367",
                        "type": "text\/javascript",
                        "exec": [
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var authdata =",
                            "    \"mGR04cy8g7bKhGiF+2YdPB+2+mbZYrH90mrhc5DM1g\/YpkHMbeuNWu1JpYzUpO\/zRrhalAAudhp9+mlb\/FmR+ihGxr7hk+GvrVWQRod+kuXPiooPStFHjU3tPYKiDkiiIWXhjWk92BkNkuKYWRqeo\/Va8rkAF24BS45mjxWHbpRKEUysfDCRLTqPx2rwdt2lQ03J+eKriJ0Hf9U2FY8WHjQCp6axsSqF0sHGO8OVf2KjTDeFt2KyRmEaNWxjuNpFOgW9YG2BPrKs7YuefDqHmRJYWnyn5O1c+9N9Iz9RB7AK8z0gFBZI2rH+pxx7qaxpwx\/CpTFiOWE+d9EKQliAnw==\";",
                            "    ",
                            "    ",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "ec965bbd-72af-4467-aca9-653da952dee0",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"token\", jsonData.token);",
                            "postman.setEnvironmentVariable(\"tokenExpiryDate\", jsonData.tokenExpiryDate);",
                            ""
                        ]
                    }
                }
            ],
            "folder": "523678fc-9b3e-4567-b4c3-98e4c5c5df73",
            "preRequestScript": "var amount = postman.getEnvironmentVariable(\"amount\");\nvar authdata =\n    \"mGR04cy8g7bKhGiF+2YdPB+2+mbZYrH90mrhc5DM1g\/YpkHMbeuNWu1JpYzUpO\/zRrhalAAudhp9+mlb\/FmR+ihGxr7hk+GvrVWQRod+kuXPiooPStFHjU3tPYKiDkiiIWXhjWk92BkNkuKYWRqeo\/Va8rkAF24BS45mjxWHbpRKEUysfDCRLTqPx2rwdt2lQ03J+eKriJ0Hf9U2FY8WHjQCp6axsSqF0sHGO8OVf2KjTDeFt2KyRmEaNWxjuNpFOgW9YG2BPrKs7YuefDqHmRJYWnyn5O1c+9N9Iz9RB7AK8z0gFBZI2rH+pxx7qaxpwx\/CpTFiOWE+d9EKQliAnw==\";\n    \n    \n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"token\", jsonData.token);\npostman.setEnvironmentVariable(\"tokenExpiryDate\", jsonData.tokenExpiryDate);\n",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n  \"transactionRef\": \"JB-{{Timestamp}}-ReccValid\",                   \r\n \"authData\":\"mGR04cy8g7bKhGiF+2YdPB+2+mbZYrH90mrhc5DM1g\/YpkHMbeuNWu1JpYzUpO\/zRrhalAAudhp9+mlb\/FmR+ihGxr7hk+GvrVWQRod+kuXPiooPStFHjU3tPYKiDkiiIWXhjWk92BkNkuKYWRqeo\/Va8rkAF24BS45mjxWHbpRKEUysfDCRLTqPx2rwdt2lQ03J+eKriJ0Hf9U2FY8WHjQCp6axsSqF0sHGO8OVf2KjTDeFt2KyRmEaNWxjuNpFOgW9YG2BPrKs7YuefDqHmRJYWnyn5O1c+9N9Iz9RB7AK8z0gFBZI2rH+pxx7qaxpwx\/CpTFiOWE+d9EKQliAnw==\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "d5141d54-d276-442a-87c4-6dc70c1ea68f",
            "name": "Purchase With Card",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "cca0e5a9-87db-4206-9c77-2d7417002832",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "var amount = postman.getEnvironmentVariable(\"amount\");",
                            "var authdata =",
                            "    \"B3nf+47SarZM0Mfrcb\/qVmeHPnLXZu1qVUX1a8+rZ15YU6A7vNK143fH+nMDwrMpru3NiWHK\/eB4o+bHJhJvk\/LhRSScwkLoLbPZbJIQ0Pt31dJ3wFmTD3WxWrwQE9giV1ZUxcdj1AGJsDXpsztztB7vdN8kJ9bRtFf5JacDJmdAPpdn71xWZqvkG8Rmpou7\/15C1dR4UiExGdUqItu0GO4h4kxczh8IhCfei0We9VYIcxB95Lxf0J0rhx\/tlfx+lP7Rh\/KCO9QOtNmgn0rNE6yUn3xYBq9pU3Bv\/P\/RKPyAtlArZVqExTUspat\/Ip7jHj\/dygKqP168jcrHtYTLjg==\";",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "5e83e769-e8ea-4620-a829-b70358bc11b3",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"TermUrl\", jsonData.TermUrl);",
                            "postman.setEnvironmentVariable(\"MD\", jsonData.MD);",
                            "postman.setEnvironmentVariable(\"PaReq\", jsonData.PaReq);",
                            "postman.setEnvironmentVariable(\"TransactionId\", jsonData.transactionId);",
                            "postman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);",
                            "postman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);"
                        ]
                    }
                }
            ],
            "folder": "9f3f9f1a-3366-4628-9282-3c8731dce6d0",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\nvar amount = postman.getEnvironmentVariable(\"amount\");\nvar authdata =\n    \"B3nf+47SarZM0Mfrcb\/qVmeHPnLXZu1qVUX1a8+rZ15YU6A7vNK143fH+nMDwrMpru3NiWHK\/eB4o+bHJhJvk\/LhRSScwkLoLbPZbJIQ0Pt31dJ3wFmTD3WxWrwQE9giV1ZUxcdj1AGJsDXpsztztB7vdN8kJ9bRtFf5JacDJmdAPpdn71xWZqvkG8Rmpou7\/15C1dR4UiExGdUqItu0GO4h4kxczh8IhCfei0We9VYIcxB95Lxf0J0rhx\/tlfx+lP7Rh\/KCO9QOtNmgn0rNE6yUn3xYBq9pU3Bv\/P\/RKPyAtlArZVqExTUspat\/Ip7jHj\/dygKqP168jcrHtYTLjg==\";\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"TermUrl\", jsonData.TermUrl);\npostman.setEnvironmentVariable(\"MD\", jsonData.MD);\npostman.setEnvironmentVariable(\"PaReq\", jsonData.PaReq);\npostman.setEnvironmentVariable(\"TransactionId\", jsonData.transactionId);\npostman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);\npostman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n    \"customerId\": \"JOnJazzy@gmail.com\",\r\n    \"amount\": \"{{amount}}\",\r\n    \"authData\":\r\n    \"B3nf+47SarZM0Mfrcb\/qVmeHPnLXZu1qVUX1a8+rZ15YU6A7vNK143fH+nMDwrMpru3NiWHK\/eB4o+bHJhJvk\/LhRSScwkLoLbPZbJIQ0Pt31dJ3wFmTD3WxWrwQE9giV1ZUxcdj1AGJsDXpsztztB7vdN8kJ9bRtFf5JacDJmdAPpdn71xWZqvkG8Rmpou7\/15C1dR4UiExGdUqItu0GO4h4kxczh8IhCfei0We9VYIcxB95Lxf0J0rhx\/tlfx+lP7Rh\/KCO9QOtNmgn0rNE6yUn3xYBq9pU3Bv\/P\/RKPyAtlArZVqExTUspat\/Ip7jHj\/dygKqP168jcrHtYTLjg==\",\r\n    \"currency\": \"NGN\",\r\n    \"transactionRef\": \"JB-{{Timestamp}}-VISA\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "e0cc637b-7967-461a-af40-a5febe430e0d",
            "name": "Passport Request",
            "url": "https:\/\/sandbox.interswitchng.com\/passport\/oauth\/token",
            "description": "",
            "data": [
                {
                    "key": "grant_type",
                    "value": "client_credentials",
                    "type": "text",
                    "enabled": true
                }
            ],
            "dataMode": "urlencoded",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/x-www-form-urlencoded",
                    "enabled": true,
                    "description": ""
                },
                {
                    "key": "Authorization",
                    "value": "{{Authorization}}",
                    "enabled": true,
                    "description": ""
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "",
                            "\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "\/\/Calculate Authorisation",
                            "var authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);",
                            "",
                            "\/\/Set Environment Variable",
                            "postman.setEnvironmentVariable(\"Authorization\", authorization);",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);\r",
                            "postman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);"
                        ]
                    }
                }
            ],
            "folder": "d1cdc035-c0f6-488d-8305-d0c9d206971f",
            "preRequestScript": "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\n\n\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\/\/Calculate Authorisation\nvar authorization = \"Basic\" + \" \" + b64EncodeUnicode(clientId + \":\" + clientSecret);\n\n\/\/Set Environment Variable\npostman.setEnvironmentVariable(\"Authorization\", authorization);\n",
            "tests": "var jsonData = JSON.parse(responseBody);\r\npostman.setEnvironmentVariable(\"Access_token\", \"Bearer \" + jsonData.access_token);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "headers": "Content-Type: application\/x-www-form-urlencoded\nAuthorization: {{Authorization}}\n",
            "pathVariables": []
        },
        {
            "id": "e1b1a9b0-2755-4494-aaea-62f3ea093aa2",
            "name": "OTP Validation Request (VISA)",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases\/otps\/auths",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "6ac675a8-cd19-43c8-a748-9ccf1dd334d8",
                        "type": "text\/javascript",
                        "exec": [
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                }
            ],
            "folder": "9f3f9f1a-3366-4628-9282-3c8731dce6d0",
            "preRequestScript": "function guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": null,
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n  \"paymentId\":\"{{paymentId}}\",\r\n  \"transactionId\": \"{{TransactionId}}\",\r\n  \"eciFlag\":\"07\"               \r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        },
        {
            "id": "fd60d6b7-fc42-472e-ac1d-0208096caa01",
            "name": "Purchase With Card",
            "url": "https:\/\/sandbox.interswitchng.com\/api\/v3\/purchases",
            "description": "",
            "data": [],
            "dataMode": "raw",
            "headerData": [
                {
                    "key": "Content-Type",
                    "value": "application\/json",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Authorization",
                    "value": "{{Access_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Timestamp",
                    "value": "{{Timestamp}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Nonce",
                    "value": "{{Nonce}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Signature",
                    "value": "{{Signature}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "SignatureMethod",
                    "value": "{{SignatureMethod}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "AuthKeyVersion",
                    "value": "1",
                    "description": "",
                    "enabled": true
                }
            ],
            "method": "POST",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "8e404719-1168-475a-a191-8fbbcf6e4da2",
                        "type": "text\/javascript",
                        "exec": [
                            "var amount = 666666.66;",
                            "var authdata =",
                            "    \"SkQ43X4l9dTqQJ4LaC6ORGb7WhFVBXOhjRy08vHF5JNFBQFN3YUWXrB\/gPpC2CLpAizl0F9cDNyW9JnAs9Wm4eaiGYjtFboGT4i3y9CCdpyXIlRIEmilyzUfWlGIvqnJTYBzQC5o+TLgEzWdu17pXmyXkvhZs13SPVzTVBHmnq8fE9fL6RfR0BjKPClzeJCaKPsouR2uH6pSVIl7zx\/gHrXS2hhs9IjBCIE7o5IB40HuKXbb8\/62uVpD262x1zJzBX4eoyga\/AJKN0052HTO8HEPQ78Z7ggkS5e0jfFF5Nf6u1j7Mr2BiZX7DFtZgvuMw8AWwV2ku20JDrtNEwOBxw==\";",
                            "",
                            "",
                            "",
                            "",
                            "function guid() {",
                            "function s4() {",
                            "return Math.floor((1 + Math.random()) * 0x10000)",
                            ".toString(16)",
                            ".substring(1);",
                            "}",
                            "return s4() + s4() + s4() + s4() + ",
                            "s4() + s4() + s4() + s4();",
                            "}",
                            "",
                            "function timestamp(){",
                            "return Date.now()\/1000 | 0;",
                            "}",
                            "'use strict';",
                            "var Sha1 = {};",
                            "",
                            "\/**",
                            "* Generates SHA-1 hash of string.",
                            "*",
                            "* @param {string} msg - (Unicode) string to be hashed.",
                            "* @returns {string} Hash of msg as hex character string.",
                            "*\/",
                            "Sha1.hash = function(msg) {",
                            "\/\/ convert string to UTF-8, as SHA only deals with byte-streams",
                            "msg = msg.utf8Encode();",
                            "\/\/ constants [\u00a74.2.1]",
                            "var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];",
                            "\/\/ PREPROCESSING",
                            "msg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]",
                            "\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]",
                            "var l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length",
                            "var N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints",
                            "var M = new Array(N);",
                            "for (var i=0; i<N; i++) {",
                            "M[i] = new Array(16);",
                            "for (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding",
                            "M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |",
                            "(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));",
                            "} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0",
                            "}",
                            "\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]",
                            "\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts",
                            "\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators",
                            "M[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);",
                            "M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;",
                            "\/\/ set initial hash value [\u00a75.3.1]",
                            "var H0 = 0x67452301;",
                            "var H1 = 0xefcdab89;",
                            "var H2 = 0x98badcfe;",
                            "var H3 = 0x10325476;",
                            "var H4 = 0xc3d2e1f0;",
                            "\/\/ HASH COMPUTATION [\u00a76.1.2]",
                            "var W = new Array(80); var a, b, c, d, e;",
                            "for (var i=0; i<N; i++) {",
                            "\/\/ 1 - prepare message schedule 'W'",
                            "for (var t=0; t<16; t++) W[t] = M[i][t];",
                            "for (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);",
                            "\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value",
                            "a = H0; b = H1; c = H2; d = H3; e = H4;",
                            "\/\/ 3 - main loop",
                            "for (var t=0; t<80; t++) {",
                            "var s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants",
                            "var T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;",
                            "e = d;",
                            "d = c;",
                            "c = Sha1.ROTL(b, 30);",
                            "b = a;",
                            "a = T;",
                            "}",
                            "\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')",
                            "H0 = (H0+a) & 0xffffffff;",
                            "H1 = (H1+b) & 0xffffffff;",
                            "H2 = (H2+c) & 0xffffffff;",
                            "H3 = (H3+d) & 0xffffffff;",
                            "H4 = (H4+e) & 0xffffffff;",
                            "}",
                            "return Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +",
                            "Sha1.toHexStr(H3) + Sha1.toHexStr(H4);",
                            "};",
                            "",
                            "\/**",
                            "* Function 'f' [\u00a74.1.1].",
                            "* @private",
                            "*\/",
                            "Sha1.f = function(s, x, y, z) {",
                            "switch (s) {",
                            "case 0: return (x & y) ^ (~x & z); \/\/ Ch()",
                            "case 1: return x ^ y ^ z; \/\/ Parity()",
                            "case 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()",
                            "case 3: return x ^ y ^ z; \/\/ Parity()",
                            "}",
                            "};",
                            "\/**",
                            "* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].",
                            "* @private",
                            "*\/",
                            "Sha1.ROTL = function(x, n) {",
                            "return (x<<n) | (x>>>(32-n));",
                            "};",
                            "",
                            "\/**",
                            "* Hexadecimal representation of a number.",
                            "* @private",
                            "*\/",
                            "Sha1.toHexStr = function(n) {",
                            "\/\/ note can't use toString(16) as it is implementation-dependant,",
                            "\/\/ and in IE returns signed numbers when used on full words",
                            "var s='', v;",
                            "for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }",
                            "return s;",
                            "};",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "",
                            "\/** Extend String object with method to encode multi-byte string to utf8",
                            " - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/",
                            "if (typeof String.prototype.utf8Encode == 'undefined') {",
                            "String.prototype.utf8Encode = function() {",
                            "return unescape( encodeURIComponent( this ) );",
                            "};",
                            "}",
                            "\/** Extend String object with method to decode utf8 string to multi-byte **\/",
                            "if (typeof String.prototype.utf8Decode == 'undefined') {",
                            "String.prototype.utf8Decode = function() {",
                            "try {",
                            "return decodeURIComponent( escape( this ) );",
                            "} catch (e) {",
                            "return this; \/\/ invalid UTF-8? return as-is",
                            "}",
                            "};",
                            "}",
                            "",
                            "\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/",
                            "if (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export",
                            "function hexToBase64(str) {",
                            "return btoa(String.fromCharCode.apply(null,",
                            "str.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))",
                            ");",
                            "}",
                            "function b64EncodeUnicode(str) {",
                            "return btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {",
                            "return String.fromCharCode('0x' + p1);",
                            "}));",
                            "}",
                            "var httpMethod = request.method;",
                            "var host = postman.getEnvironmentVariable(\"host\");",
                            "var url = request.url;",
                            "\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");",
                            "url = url.replace(\"{{host}}\",host);",
                            "url = encodeURIComponent(url);",
                            "var timestamp =timestamp();",
                            "var nonce = guid();",
                            "var clientId = postman.getEnvironmentVariable(\"clientId\");",
                            "var authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);",
                            "var clientSecret = postman.getEnvironmentVariable(\"secretKey\");",
                            "",
                            "",
                            "postman.setEnvironmentVariable(\"Timestamp\", timestamp);",
                            "var signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;",
                            " ",
                            "postman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));",
                            "",
                            "postman.setEnvironmentVariable(\"Nonce\", nonce);",
                            "",
                            "postman.setEnvironmentVariable(\"base\", signatureCipher);",
                            "",
                            "postman.setEnvironmentVariable(\"TransactionRef\", \"JB-\" + timestamp + \"-Enrol\");",
                            " ",
                            "\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "2a29a164-80c8-4e17-b455-995f29417d51",
                        "type": "text\/javascript",
                        "exec": [
                            "var jsonData = JSON.parse(responseBody);",
                            "postman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);",
                            "postman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);"
                        ]
                    }
                }
            ],
            "folder": "65f68ed7-e8d0-4e09-96f7-dbfc15a332b7",
            "preRequestScript": "var amount = 666666.66;\nvar authdata =\n    \"SkQ43X4l9dTqQJ4LaC6ORGb7WhFVBXOhjRy08vHF5JNFBQFN3YUWXrB\/gPpC2CLpAizl0F9cDNyW9JnAs9Wm4eaiGYjtFboGT4i3y9CCdpyXIlRIEmilyzUfWlGIvqnJTYBzQC5o+TLgEzWdu17pXmyXkvhZs13SPVzTVBHmnq8fE9fL6RfR0BjKPClzeJCaKPsouR2uH6pSVIl7zx\/gHrXS2hhs9IjBCIE7o5IB40HuKXbb8\/62uVpD262x1zJzBX4eoyga\/AJKN0052HTO8HEPQ78Z7ggkS5e0jfFF5Nf6u1j7Mr2BiZX7DFtZgvuMw8AWwV2ku20JDrtNEwOBxw==\";\n\n\n\n\nfunction guid() {\nfunction s4() {\nreturn Math.floor((1 + Math.random()) * 0x10000)\n.toString(16)\n.substring(1);\n}\nreturn s4() + s4() + s4() + s4() + \ns4() + s4() + s4() + s4();\n}\n\nfunction timestamp(){\nreturn Date.now()\/1000 | 0;\n}\n'use strict';\nvar Sha1 = {};\n\n\/**\n* Generates SHA-1 hash of string.\n*\n* @param {string} msg - (Unicode) string to be hashed.\n* @returns {string} Hash of msg as hex character string.\n*\/\nSha1.hash = function(msg) {\n\/\/ convert string to UTF-8, as SHA only deals with byte-streams\nmsg = msg.utf8Encode();\n\/\/ constants [\u00a74.2.1]\nvar K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n\/\/ PREPROCESSING\nmsg += String.fromCharCode(0x80); \/\/ add trailing '1' bit (+ 0's padding) to string [\u00a75.1.1]\n\/\/ convert string msg into 512-bit\/16-integer blocks arrays of ints [\u00a75.2.1]\nvar l = msg.length\/4 + 2; \/\/ length (in 32-bit integers) of msg + \u20181\u2019 + appended length\nvar N = Math.ceil(l\/16); \/\/ number of 16-integer-blocks required to hold 'l' ints\nvar M = new Array(N);\nfor (var i=0; i<N; i++) {\nM[i] = new Array(16);\nfor (var j=0; j<16; j++) { \/\/ encode 4 chars per integer, big-endian encoding\nM[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n(msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n} \/\/ note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n}\n\/\/ add length (in bits) into final pair of 32-bit integers (big-endian) [\u00a75.1.1]\n\/\/ note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n\/\/ bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\nM[N-1][14] = ((msg.length-1)*8) \/ Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\nM[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\/\/ set initial hash value [\u00a75.3.1]\nvar H0 = 0x67452301;\nvar H1 = 0xefcdab89;\nvar H2 = 0x98badcfe;\nvar H3 = 0x10325476;\nvar H4 = 0xc3d2e1f0;\n\/\/ HASH COMPUTATION [\u00a76.1.2]\nvar W = new Array(80); var a, b, c, d, e;\nfor (var i=0; i<N; i++) {\n\/\/ 1 - prepare message schedule 'W'\nfor (var t=0; t<16; t++) W[t] = M[i][t];\nfor (var t=16; t<80; t++) W[t] = Sha1.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\/\/ 2 - initialise five working variables a, b, c, d, e with previous hash value\na = H0; b = H1; c = H2; d = H3; e = H4;\n\/\/ 3 - main loop\nfor (var t=0; t<80; t++) {\nvar s = Math.floor(t\/20); \/\/ seq for blocks of 'f' functions and 'K' constants\nvar T = (Sha1.ROTL(a,5) + Sha1.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\ne = d;\nd = c;\nc = Sha1.ROTL(b, 30);\nb = a;\na = T;\n}\n\/\/ 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\nH0 = (H0+a) & 0xffffffff;\nH1 = (H1+b) & 0xffffffff;\nH2 = (H2+c) & 0xffffffff;\nH3 = (H3+d) & 0xffffffff;\nH4 = (H4+e) & 0xffffffff;\n}\nreturn Sha1.toHexStr(H0) + Sha1.toHexStr(H1) + Sha1.toHexStr(H2) +\nSha1.toHexStr(H3) + Sha1.toHexStr(H4);\n};\n\n\/**\n* Function 'f' [\u00a74.1.1].\n* @private\n*\/\nSha1.f = function(s, x, y, z) {\nswitch (s) {\ncase 0: return (x & y) ^ (~x & z); \/\/ Ch()\ncase 1: return x ^ y ^ z; \/\/ Parity()\ncase 2: return (x & y) ^ (x & z) ^ (y & z); \/\/ Maj()\ncase 3: return x ^ y ^ z; \/\/ Parity()\n}\n};\n\/**\n* Rotates left (circular left shift) value x by n positions [\u00a73.2.5].\n* @private\n*\/\nSha1.ROTL = function(x, n) {\nreturn (x<<n) | (x>>>(32-n));\n};\n\n\/**\n* Hexadecimal representation of a number.\n* @private\n*\/\nSha1.toHexStr = function(n) {\n\/\/ note can't use toString(16) as it is implementation-dependant,\n\/\/ and in IE returns signed numbers when used on full words\nvar s='', v;\nfor (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\nreturn s;\n};\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\n\n\/** Extend String object with method to encode multi-byte string to utf8\n - monsur.hossa.in\/2012\/07\/20\/utf-8-in-javascript.html **\/\nif (typeof String.prototype.utf8Encode == 'undefined') {\nString.prototype.utf8Encode = function() {\nreturn unescape( encodeURIComponent( this ) );\n};\n}\n\/** Extend String object with method to decode utf8 string to multi-byte **\/\nif (typeof String.prototype.utf8Decode == 'undefined') {\nString.prototype.utf8Decode = function() {\ntry {\nreturn decodeURIComponent( escape( this ) );\n} catch (e) {\nreturn this; \/\/ invalid UTF-8? return as-is\n}\n};\n}\n\n\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \/\nif (typeof module != 'undefined' && module.exports) module.exports = Sha1; \/\/ CommonJs export\nfunction hexToBase64(str) {\nreturn btoa(String.fromCharCode.apply(null,\nstr.replace(\/\\r|\\n\/g, \"\").replace(\/([\\da-fA-F]{2}) ?\/g, \"0x$1 \").replace(\/ +$\/, \"\").split(\" \"))\n);\n}\nfunction b64EncodeUnicode(str) {\nreturn btoa(encodeURIComponent(str).replace(\/%([0-9A-F]{2})\/g, function(match, p1) {\nreturn String.fromCharCode('0x' + p1);\n}));\n}\nvar httpMethod = request.method;\nvar host = postman.getEnvironmentVariable(\"host\");\nvar url = request.url;\n\/\/ url = url.replace(\"http:\/\/\", \"https:\/\/\");\nurl = url.replace(\"{{host}}\",host);\nurl = encodeURIComponent(url);\nvar timestamp =timestamp();\nvar nonce = guid();\nvar clientId = postman.getEnvironmentVariable(\"clientId\");\nvar authorization = \"InterswitchAuth\" + \" \"+b64EncodeUnicode(clientId);\nvar clientSecret = postman.getEnvironmentVariable(\"secretKey\");\n\n\npostman.setEnvironmentVariable(\"Timestamp\", timestamp);\nvar signatureCipher = httpMethod + \"&\"+ url + \"&\" +timestamp + \"&\" + nonce + \"&\" + clientId + \"&\" + clientSecret + \"&\" + amount + \"&\" + authdata;\n \npostman.setEnvironmentVariable(\"Signature\",hexToBase64(Sha1.hash(signatureCipher)));\n\npostman.setEnvironmentVariable(\"Nonce\", nonce);\n\npostman.setEnvironmentVariable(\"base\", signatureCipher);\n\npostman.setEnvironmentVariable(\"TransactionRef\", \"JB-\" + timestamp + \"-Enrol\");\n \n\/\/postman.setEnvironmentVariable(\"Authorization\", authorization);",
            "tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"paymentId\", jsonData.paymentId);\npostman.setEnvironmentVariable(\"transactionRef\", jsonData.transactionRef);",
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "950590ac-bef8-4ef5-b48c-8306f8259a7a",
            "rawModeData": "{\r\n    \"customerId\": \"JOnJazzy@gmail.com\",\r\n    \"amount\": \"666666.66\",\r\n    \"authData\":\r\n    \"SkQ43X4l9dTqQJ4LaC6ORGb7WhFVBXOhjRy08vHF5JNFBQFN3YUWXrB\/gPpC2CLpAizl0F9cDNyW9JnAs9Wm4eaiGYjtFboGT4i3y9CCdpyXIlRIEmilyzUfWlGIvqnJTYBzQC5o+TLgEzWdu17pXmyXkvhZs13SPVzTVBHmnq8fE9fL6RfR0BjKPClzeJCaKPsouR2uH6pSVIl7zx\/gHrXS2hhs9IjBCIE7o5IB40HuKXbb8\/62uVpD262x1zJzBX4eoyga\/AJKN0052HTO8HEPQ78Z7ggkS5e0jfFF5Nf6u1j7Mr2BiZX7DFtZgvuMw8AWwV2ku20JDrtNEwOBxw==\",\r\n    \"currency\": \"NGN\",\r\n    \"transactionRef\": \"{{TransactionRef}}\"\r\n}",
            "headers": "Content-Type: application\/json\nAuthorization: {{Access_token}}\nTimestamp: {{Timestamp}}\nNonce: {{Nonce}}\nSignature: {{Signature}}\nSignatureMethod: {{SignatureMethod}}\nAuthKeyVersion: 1\n",
            "pathVariables": []
        }
    ]
}